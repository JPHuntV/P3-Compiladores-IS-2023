inicio {
  programa {
    declaraFuncion: funcA {
      parametros {
        int: num1
        int: num2
      }
      bloque {
        estructuraControl {
          tipo: doWhileStm
          body: bloque {
            estructuraControl {
              tipo: ifStm
              eval: expresionBinaria {
                tipo: expresionLogica
                operador: ^
                left: expresionBinaria {
                  tipo: expresionRelacional
                  operador: >
                  left: IDENTIFIER {
                    valor: num1
                  }
                  right: literal_int {
                    99
                  }
                }
                right: expresionBinaria {
                  tipo: expresionRelacional
                  operador: <
                  left: IDENTIFIER {
                    valor: num2
                  }
                  right: literal_int {
                    55
                  }
                }
              }
              body: bloque {
                asignacion: num2 {
                  init {
                    expresionBinaria {
                      tipo: expresionAritmetica
                      operador: -
                      left: IDENTIFIER {
                        valor: num2
                      }
                      right: literal_int {
                        -22
                      }
                    }
                  }
                }
              }
              alternate: estructuraControl {
                tipo: elifStm
                eval: expresionBinaria {
                  tipo: expresionRelacional
                  operador: ==
                  left: IDENTIFIER {
                    valor: num1
                  }
                  right: literal_int {
                    100
                  }
                }
                body: bloque {
                  asignacion: num1 {
                    init {
                      expresionBinaria {
                        tipo: expresionAritmetica
                        operador: ~
                        left: expresionBinaria {
                          tipo: expresionAritmetica
                          operador: **
                          left: IDENTIFIER {
                            valor: num1
                          }
                          right: literal_int {
                            11
                          }
                        }
                        right: literal_int {
                          33
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          eval: expresionBinaria {
            tipo: expresionRelacional
            operador: <
            left: IDENTIFIER {
              valor: num1
            }
            right: IDENTIFIER {
              valor: num2
            }
          }
        }
        returnStm {
          value {
            IDENTIFIER {
              valor: num1
            }
          }
        }
      }
      dataType: int
    }
    declaraFuncion: main {
      bloque {
        returnStm {
          value {
            literal_int {
              1
            }
          }
        }
      }
      dataType: int
    }
  }
}