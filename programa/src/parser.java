
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\005\004\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\005" +
    "\000\002\014\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\005\000\002\021\003" +
    "\000\002\021\005\000\002\022\011\000\002\023\011\000" +
    "\002\023\012\000\002\055\006\000\002\024\011\000\002" +
    "\025\013\000\002\026\015\000\002\027\003\000\002\027" +
    "\004\000\002\027\005\000\002\027\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\004\000" +
    "\002\031\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\032\003\000\002\032\005\000\002\033" +
    "\005\000\002\033\006\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\035\004\000\002\035\003\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\036\003" +
    "\000\002\036\004\000\002\037\004\000\002\037\006\000" +
    "\002\040\012\000\002\040\011\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\007\000\002\042\007" +
    "\000\002\043\005\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\044\006\000\002\044\006\000\002" +
    "\044\007\000\002\044\006\000\002\046\004\000\002\047" +
    "\005\000\002\050\006\000\002\050\006\000\002\051\003" +
    "\000\002\051\003\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\016\060\005\061\016\062\012\063\017\064" +
    "\007\065\006\001\002\000\004\002\000\001\002\000\006" +
    "\056\uff9b\066\375\001\002\000\004\056\uff96\001\002\000" +
    "\004\056\uff97\001\002\000\020\002\uffff\060\022\061\016" +
    "\062\012\063\017\064\007\065\006\001\002\000\004\002" +
    "\373\001\002\000\004\056\uff98\001\002\000\016\060\005" +
    "\061\016\062\012\063\017\064\007\065\006\001\002\000" +
    "\004\056\020\001\002\000\020\002\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\001\002\000\004\056" +
    "\uff99\001\002\000\004\056\uff9a\001\002\000\004\010\021" +
    "\001\002\000\020\011\023\060\022\061\016\062\012\063" +
    "\017\064\007\065\006\001\002\000\004\056\uff9b\001\002" +
    "\000\004\017\365\001\002\000\004\056\364\001\002\000" +
    "\006\011\027\021\026\001\002\000\016\060\022\061\016" +
    "\062\012\063\017\064\007\065\006\001\002\000\004\017" +
    "\030\001\002\000\070\003\062\010\037\012\065\015\032" +
    "\033\055\034\061\035\047\036\056\041\100\042\111\043" +
    "\043\044\060\045\067\046\102\047\054\051\073\052\070" +
    "\053\103\054\064\055\076\056\112\060\040\061\016\062" +
    "\012\063\034\064\007\065\006\001\002\000\050\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\016" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\057\uffd5\001\002\000" +
    "\036\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\046\102\047\054\051\073\052\070\053\103\054\064\055" +
    "\076\056\120\001\002\000\026\007\311\011\ufff7\012\314" +
    "\013\307\016\ufff7\021\ufff7\024\315\031\312\032\313\057" +
    "\ufff7\001\002\000\004\056\357\001\002\000\072\003\uffab" +
    "\010\uffab\012\uffab\015\uffab\020\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\001\002\000\050\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\016\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\057\uffaf\001\002\000\036\010\037\012\065" +
    "\015\032\033\055\034\061\035\047\046\102\047\054\051" +
    "\073\052\070\053\103\054\064\055\076\056\120\001\002" +
    "\000\004\056\354\001\002\000\050\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\011\uffae\012\uffae\013\uffae\016\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\057\uffae\001\002\000\020\004\uffe0" +
    "\005\uffe0\006\uffe0\011\uffe0\016\uffe0\021\uffe0\057\uffe0\001" +
    "\002\000\004\010\321\001\002\000\072\003\062\010\037" +
    "\012\065\015\032\020\320\033\055\034\061\035\047\036" +
    "\056\041\100\042\111\043\043\044\060\045\067\046\102" +
    "\047\054\051\073\052\070\053\103\054\064\055\076\056" +
    "\112\060\040\061\016\062\012\063\034\064\007\065\006" +
    "\001\002\000\016\022\300\023\301\025\274\026\273\027" +
    "\276\030\277\001\002\000\004\057\272\001\002\000\036" +
    "\010\037\012\065\015\032\033\055\034\061\035\047\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\120\001\002\000\050\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\057\uffd4\001\002\000\042\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\016\uffe3\021\uffe3\022\uffd0\023\uffd0\024" +
    "\uffe3\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffe3\032\uffe3" +
    "\057\uffe3\001\002\000\006\014\265\057\264\001\002\000" +
    "\004\057\263\001\002\000\004\010\260\001\002\000\004" +
    "\056\257\001\002\000\004\010\251\001\002\000\004\057" +
    "\250\001\002\000\036\010\037\012\065\015\032\033\055" +
    "\034\061\035\047\046\102\047\054\051\073\052\070\053" +
    "\103\054\064\055\076\056\120\001\002\000\004\056\246" +
    "\001\002\000\004\057\245\001\002\000\020\004\162\005" +
    "\163\006\161\011\ufff8\016\ufff8\021\ufff8\057\ufff8\001\002" +
    "\000\050\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\016\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\057" +
    "\uffd6\001\002\000\010\051\176\052\200\056\244\001\002" +
    "\000\004\057\242\001\002\000\004\057\uffb7\001\002\000" +
    "\050\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\016\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\057\uffd7" +
    "\001\002\000\076\003\uffbf\010\uffbf\012\uffbf\015\uffbf\020" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\216\040\215" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\001" +
    "\002\000\072\003\uffbb\010\uffbb\012\uffbb\015\uffbb\020\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\050\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\016" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\057\uffd8\001\002\000" +
    "\004\057\214\001\002\000\004\056\211\001\002\000\050" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\057\uffd9\001" +
    "\002\000\072\003\uffb9\010\uffb9\012\uffb9\015\uffb9\020\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\004\010\203" +
    "\001\002\000\072\003\uffa1\010\uffa1\012\uffa1\015\uffa1\020" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002\000\004\010" +
    "\174\001\002\000\034\004\uffde\005\uffde\006\uffde\011\uffde" +
    "\016\uffde\021\uffde\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\057\uffde\001\002\000\004\057\173\001\002" +
    "\000\036\007\uffd2\012\uffd2\013\uffd2\014\170\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\057\171\001\002\000\020\004\uffdd\005\uffdd\006" +
    "\uffdd\011\uffdd\016\uffdd\021\uffdd\057\uffdd\001\002\000\004" +
    "\057\167\001\002\000\072\003\uffba\010\uffba\012\uffba\015" +
    "\uffba\020\uffba\033\uffba\034\uffba\035\uffba\036\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002\000" +
    "\004\017\150\001\002\000\042\007\uffda\010\114\012\uffda" +
    "\013\uffda\014\116\015\115\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\057\uffda" +
    "\001\002\000\052\004\uff8b\005\uff8b\006\uff8b\007\uff8b\011" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\016\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\057\uff8b\001\002\000\026\011\133\015\137" +
    "\046\102\047\054\051\124\052\132\053\127\054\125\055" +
    "\130\056\135\001\002\000\004\051\122\001\002\000\036" +
    "\010\037\012\065\015\032\033\055\034\061\035\047\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\120\001\002\000\004\057\uffad\001\002\000\054\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\114\011\uffda\012\uffda" +
    "\013\uffda\015\115\016\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\057\uffda\001\002\000\050\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\057\uffd2\001\002\000\004\016\123\001\002" +
    "\000\052\004\uff93\005\uff93\006\uff93\007\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\016\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\057\uff93\001\002\000\006\011\uffce\021\uffce\001\002" +
    "\000\006\011\uffca\021\uffca\001\002\000\006\011\uffb3\021" +
    "\uffb3\001\002\000\006\011\uffcc\021\uffcc\001\002\000\006" +
    "\011\uffcb\021\uffcb\001\002\000\006\011\146\021\145\001" +
    "\002\000\006\011\uffcd\021\uffcd\001\002\000\050\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\016" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\057\uffb1\001\002\000" +
    "\006\011\uffb4\021\uffb4\001\002\000\010\010\114\011\uffb6" +
    "\021\uffb6\001\002\000\006\011\uffb5\021\uffb5\001\002\000" +
    "\036\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\046\102\047\054\051\073\052\070\053\103\054\064\055" +
    "\076\056\120\001\002\000\006\016\uffc8\021\uffc8\001\002" +
    "\000\006\016\143\021\142\001\002\000\036\010\037\012" +
    "\065\015\032\033\055\034\061\035\047\046\102\047\054" +
    "\051\073\052\070\053\103\054\064\055\076\056\120\001" +
    "\002\000\006\011\uffc9\021\uffc9\001\002\000\006\016\uffc7" +
    "\021\uffc7\001\002\000\024\015\137\046\102\047\054\051" +
    "\124\052\132\053\127\054\125\055\130\056\135\001\002" +
    "\000\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\057" +
    "\uffb0\001\002\000\006\011\uffb2\021\uffb2\001\002\000\070" +
    "\003\062\010\037\012\065\015\032\033\055\034\061\035" +
    "\047\036\056\041\100\042\111\043\043\044\060\045\067" +
    "\046\102\047\054\051\073\052\070\053\103\054\064\055" +
    "\076\056\112\060\040\061\016\062\012\063\034\064\007" +
    "\065\006\001\002\000\072\003\062\010\037\012\065\015" +
    "\032\020\152\033\055\034\061\035\047\036\056\041\100" +
    "\042\111\043\043\044\060\045\067\046\102\047\054\051" +
    "\073\052\070\053\103\054\064\055\076\056\112\060\040" +
    "\061\016\062\012\063\034\064\007\065\006\001\002\000" +
    "\004\041\154\001\002\000\072\003\uffa0\010\uffa0\012\uffa0" +
    "\015\uffa0\020\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\001\002" +
    "\000\004\010\155\001\002\000\036\010\037\012\065\015" +
    "\032\033\055\034\061\035\047\046\102\047\054\051\073" +
    "\052\070\053\103\054\064\055\076\056\120\001\002\000" +
    "\012\004\162\005\163\006\161\011\160\001\002\000\034" +
    "\004\uffd0\005\uffd0\006\uffd0\011\uffd0\016\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\057\uffd0" +
    "\001\002\000\004\057\166\001\002\000\036\010\uffe6\012" +
    "\uffe6\015\uffe6\033\uffe6\034\uffe6\035\uffe6\046\uffe6\047\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\001" +
    "\002\000\036\010\uffe4\012\uffe4\015\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\001\002\000\036\010\uffe5\012\uffe5" +
    "\015\uffe5\033\uffe5\034\uffe5\035\uffe5\046\uffe5\047\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002" +
    "\000\036\010\037\012\065\015\032\033\055\034\061\035" +
    "\047\046\102\047\054\051\073\052\070\053\103\054\064" +
    "\055\076\056\120\001\002\000\020\004\uffdf\005\uffdf\006" +
    "\uffdf\011\uffdf\016\uffdf\021\uffdf\057\uffdf\001\002\000\072" +
    "\003\uffc1\010\uffc1\012\uffc1\015\uffc1\020\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\001\002\000\072\003\uffac\010\uffac\012" +
    "\uffac\015\uffac\020\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\001" +
    "\002\000\036\010\037\012\065\015\032\033\055\034\061" +
    "\035\047\046\102\047\054\051\073\052\070\053\103\054" +
    "\064\055\076\056\120\001\002\000\072\003\uffa4\010\uffa4" +
    "\012\uffa4\015\uffa4\020\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\001\002\000\004\057\uff8a\001\002\000\072\003\uffa6\010" +
    "\uffa6\012\uffa6\015\uffa6\020\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\001\002\000\010\051\176\052\200\056\177\001\002" +
    "\000\004\011\202\001\002\000\050\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\011\uff87\012\uff87\013\uff87\016\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\057\uff87\001\002\000\004\011\201" +
    "\001\002\000\050\004\uff86\005\uff86\006\uff86\007\uff86\011" +
    "\uff86\012\uff86\013\uff86\016\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\057\uff86\001\002\000\050\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\011\uff88\012\uff88\013\uff88\016\uff88\021\uff88\022" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\057\uff88\001\002\000\050\004\uff89\005" +
    "\uff89\006\uff89\007\uff89\011\uff89\012\uff89\013\uff89\016\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\057\uff89\001\002\000\036" +
    "\010\037\012\065\015\032\033\055\034\061\035\047\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\120\001\002\000\012\004\162\005\163\006\161\011" +
    "\205\001\002\000\004\017\206\001\002\000\070\003\062" +
    "\010\037\012\065\015\032\033\055\034\061\035\047\036" +
    "\056\041\100\042\111\043\043\044\060\045\067\046\102" +
    "\047\054\051\073\052\070\053\103\054\064\055\076\056" +
    "\112\060\040\061\016\062\012\063\034\064\007\065\006" +
    "\001\002\000\072\003\062\010\037\012\065\015\032\020" +
    "\210\033\055\034\061\035\047\036\056\041\100\042\111" +
    "\043\043\044\060\045\067\046\102\047\054\051\073\052" +
    "\070\053\103\054\064\055\076\056\112\060\040\061\016" +
    "\062\012\063\034\064\007\065\006\001\002\000\072\003" +
    "\uffc2\010\uffc2\012\uffc2\015\uffc2\020\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\001\002\000\006\014\212\057\uff90\001\002" +
    "\000\036\010\037\012\065\015\032\033\055\034\061\035" +
    "\047\046\102\047\054\051\073\052\070\053\103\054\064" +
    "\055\076\056\120\001\002\000\004\057\uff8c\001\002\000" +
    "\072\003\uffa8\010\uffa8\012\uffa8\015\uffa8\020\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\001\002\000\004\017\237\001\002" +
    "\000\004\010\231\001\002\000\072\003\uffbc\010\uffbc\012" +
    "\uffbc\015\uffbc\020\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\001" +
    "\002\000\076\003\uffbe\010\uffbe\012\uffbe\015\uffbe\020\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\221\040\215\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\004\010\223\001\002\000\072\003\uffbd\010\uffbd\012" +
    "\uffbd\015\uffbd\020\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001" +
    "\002\000\036\010\037\012\065\015\032\033\055\034\061" +
    "\035\047\046\102\047\054\051\073\052\070\053\103\054" +
    "\064\055\076\056\120\001\002\000\012\004\162\005\163" +
    "\006\161\011\225\001\002\000\004\017\226\001\002\000" +
    "\070\003\062\010\037\012\065\015\032\033\055\034\061" +
    "\035\047\036\056\041\100\042\111\043\043\044\060\045" +
    "\067\046\102\047\054\051\073\052\070\053\103\054\064" +
    "\055\076\056\112\060\040\061\016\062\012\063\034\064" +
    "\007\065\006\001\002\000\072\003\062\010\037\012\065" +
    "\015\032\020\230\033\055\034\061\035\047\036\056\041" +
    "\100\042\111\043\043\044\060\045\067\046\102\047\054" +
    "\051\073\052\070\053\103\054\064\055\076\056\112\060" +
    "\040\061\016\062\012\063\034\064\007\065\006\001\002" +
    "\000\076\003\uffc4\010\uffc4\012\uffc4\015\uffc4\020\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000" +
    "\036\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\046\102\047\054\051\073\052\070\053\103\054\064\055" +
    "\076\056\120\001\002\000\012\004\162\005\163\006\161" +
    "\011\233\001\002\000\004\017\234\001\002\000\070\003" +
    "\062\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\036\056\041\100\042\111\043\043\044\060\045\067\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\112\060\040\061\016\062\012\063\034\064\007\065" +
    "\006\001\002\000\072\003\062\010\037\012\065\015\032" +
    "\020\236\033\055\034\061\035\047\036\056\041\100\042" +
    "\111\043\043\044\060\045\067\046\102\047\054\051\073" +
    "\052\070\053\103\054\064\055\076\056\112\060\040\061" +
    "\016\062\012\063\034\064\007\065\006\001\002\000\076" +
    "\003\uffc5\010\uffc5\012\uffc5\015\uffc5\020\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\070\003" +
    "\062\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\036\056\041\100\042\111\043\043\044\060\045\067\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\112\060\040\061\016\062\012\063\034\064\007\065" +
    "\006\001\002\000\072\003\062\010\037\012\065\015\032" +
    "\020\241\033\055\034\061\035\047\036\056\041\100\042" +
    "\111\043\043\044\060\045\067\046\102\047\054\051\073" +
    "\052\070\053\103\054\064\055\076\056\112\060\040\061" +
    "\016\062\012\063\034\064\007\065\006\001\002\000\072" +
    "\003\uffc3\010\uffc3\012\uffc3\015\uffc3\020\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\001\002\000\072\003\uffaa\010\uffaa\012" +
    "\uffaa\015\uffaa\020\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\001" +
    "\002\000\050\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\013\uffea\016\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\057\uffea\001\002\000\050\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\057\uffe9\001\002\000\072\003\uffa2\010\uffa2" +
    "\012\uffa2\015\uffa2\020\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\001\002\000\050\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\016\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\057\uffe7\001\002\000\004\057\uffb8\001\002\000\072" +
    "\003\uffa5\010\uffa5\012\uffa5\015\uffa5\020\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\001\002\000\036\010\037\012\065\015" +
    "\032\033\055\034\061\035\047\046\102\047\054\051\073" +
    "\052\070\053\103\054\064\055\076\056\120\001\002\000" +
    "\012\004\162\005\163\006\161\011\253\001\002\000\004" +
    "\017\254\001\002\000\070\003\062\010\037\012\065\015" +
    "\032\033\055\034\061\035\047\036\056\041\100\042\111" +
    "\043\043\044\060\045\067\046\102\047\054\051\073\052" +
    "\070\053\103\054\064\055\076\056\112\060\040\061\016" +
    "\062\012\063\034\064\007\065\006\001\002\000\072\003" +
    "\062\010\037\012\065\015\032\020\256\033\055\034\061" +
    "\035\047\036\056\041\100\042\111\043\043\044\060\045" +
    "\067\046\102\047\054\051\073\052\070\053\103\054\064" +
    "\055\076\056\112\060\040\061\016\062\012\063\034\064" +
    "\007\065\006\001\002\000\076\003\uffc6\010\uffc6\012\uffc6" +
    "\015\uffc6\020\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\001\002\000\050\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\016\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\057\uffe8\001\002\000\036\010\037\012\065" +
    "\015\032\033\055\034\061\035\047\046\102\047\054\051" +
    "\073\052\070\053\103\054\064\055\076\056\120\001\002" +
    "\000\004\011\262\001\002\000\050\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\011\uff85\012\uff85\013\uff85\016\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\057\uff85\001\002\000\072\003\uffa7" +
    "\010\uffa7\012\uffa7\015\uffa7\020\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\001\002\000\072\003\uffa9\010\uffa9\012\uffa9\015" +
    "\uffa9\020\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\001\002\000" +
    "\004\015\266\001\002\000\036\010\037\012\065\015\032" +
    "\033\055\034\061\035\047\046\102\047\054\051\073\052" +
    "\070\053\103\054\064\055\076\056\120\001\002\000\006" +
    "\016\270\021\142\001\002\000\004\057\uff8d\001\002\000" +
    "\020\004\uffdc\005\uffdc\006\uffdc\011\uffdc\016\uffdc\021\uffdc" +
    "\057\uffdc\001\002\000\072\003\uffa3\010\uffa3\012\uffa3\015" +
    "\uffa3\020\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000" +
    "\034\010\uffed\012\uffed\015\uffed\033\uffed\034\uffed\046\uffed" +
    "\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\001\002\000\034\010\uffef\012\uffef\015\uffef\033\uffef" +
    "\034\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\001\002\000\034\010\302\012\065" +
    "\015\032\033\055\034\061\046\102\047\054\051\073\052" +
    "\070\053\303\054\064\055\076\056\120\001\002\000\034" +
    "\010\uffec\012\uffec\015\uffec\033\uffec\034\uffec\046\uffec\047" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\001\002\000\034\010\uffeb\012\uffeb\015\uffeb\033\uffeb\034" +
    "\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\001\002\000\034\010\ufff0\012\ufff0\015" +
    "\ufff0\033\ufff0\034\ufff0\046\ufff0\047\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000\034\010" +
    "\uffee\012\uffee\015\uffee\033\uffee\034\uffee\046\uffee\047\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\001" +
    "\002\000\032\010\302\012\065\015\032\033\055\034\061" +
    "\046\102\047\054\051\073\052\070\054\064\055\076\056" +
    "\120\001\002\000\020\004\uffcf\005\uffcf\006\uffcf\011\uffcf" +
    "\016\uffcf\021\uffcf\057\uffcf\001\002\000\020\004\uffe1\005" +
    "\uffe1\006\uffe1\011\uffe1\016\uffe1\021\uffe1\057\uffe1\001\002" +
    "\000\020\007\311\011\310\012\314\013\307\024\315\031" +
    "\312\032\313\001\002\000\020\007\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\024\uffe3\031\uffe3\032\uffe3\001\002\000\032\010" +
    "\ufff6\012\ufff6\015\ufff6\033\ufff6\034\ufff6\046\ufff6\047\ufff6" +
    "\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000" +
    "\050\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\016\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\057\uffd1" +
    "\001\002\000\032\010\ufff4\012\ufff4\015\ufff4\033\ufff4\034" +
    "\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\001\002\000\032\010\ufff3\012\ufff3\015\ufff3\033" +
    "\ufff3\034\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\001\002\000\032\010\ufff1\012\ufff1\015" +
    "\ufff1\033\ufff1\034\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\001\002\000\032\010\ufff5\012" +
    "\ufff5\015\ufff5\033\ufff5\034\ufff5\046\ufff5\047\ufff5\051\ufff5" +
    "\052\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\032\010" +
    "\ufff2\012\ufff2\015\ufff2\033\ufff2\034\ufff2\046\ufff2\047\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000" +
    "\032\010\302\012\065\015\032\033\055\034\061\046\102" +
    "\047\054\051\073\052\070\054\064\055\076\056\120\001" +
    "\002\000\026\007\uffe2\011\uffe2\012\uffe2\013\uffe2\016\uffe2" +
    "\021\uffe2\024\uffe2\031\uffe2\032\uffe2\057\uffe2\001\002\000" +
    "\020\002\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\001\002\000\016\060\322\061\016\062\012\063" +
    "\325\064\007\065\006\001\002\000\004\056\346\001\002" +
    "\000\004\057\336\001\002\000\004\056\335\001\002\000" +
    "\004\056\327\001\002\000\004\014\265\001\002\000\006" +
    "\014\330\015\331\001\002\000\036\010\037\012\065\015" +
    "\032\033\055\034\061\035\047\046\102\047\054\051\073" +
    "\052\070\053\103\054\064\055\076\056\120\001\002\000" +
    "\004\051\332\001\002\000\004\016\333\001\002\000\006" +
    "\014\uff94\057\uff94\001\002\000\004\057\uff8e\001\002\000" +
    "\004\014\212\001\002\000\036\010\037\012\065\015\032" +
    "\033\055\034\061\035\047\046\102\047\054\051\073\052" +
    "\070\053\103\054\064\055\076\056\120\001\002\000\012" +
    "\004\162\005\163\006\161\057\340\001\002\000\036\010" +
    "\037\012\065\015\032\033\055\034\061\035\047\046\102" +
    "\047\054\051\073\052\070\053\103\054\064\055\076\056" +
    "\120\001\002\000\004\011\342\001\002\000\004\017\343" +
    "\001\002\000\070\003\062\010\037\012\065\015\032\033" +
    "\055\034\061\035\047\036\056\041\100\042\111\043\043" +
    "\044\060\045\067\046\102\047\054\051\073\052\070\053" +
    "\103\054\064\055\076\056\112\060\040\061\016\062\012" +
    "\063\034\064\007\065\006\001\002\000\072\003\062\010" +
    "\037\012\065\015\032\020\345\033\055\034\061\035\047" +
    "\036\056\041\100\042\111\043\043\044\060\045\067\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\112\060\040\061\016\062\012\063\034\064\007\065" +
    "\006\001\002\000\072\003\uffc0\010\uffc0\012\uffc0\015\uffc0" +
    "\020\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\006" +
    "\014\350\015\347\001\002\000\004\051\352\001\002\000" +
    "\036\010\037\012\065\015\032\033\055\034\061\035\047" +
    "\046\102\047\054\051\073\052\070\053\103\054\064\055" +
    "\076\056\120\001\002\000\004\057\uff8f\001\002\000\004" +
    "\016\353\001\002\000\006\014\uff95\057\uff95\001\002\000" +
    "\010\014\350\015\347\057\uff92\001\002\000\012\004\162" +
    "\005\163\006\161\011\356\001\002\000\020\004\uffdb\005" +
    "\uffdb\006\uffdb\011\uffdb\016\uffdb\021\uffdb\057\uffdb\001\002" +
    "\000\010\014\330\015\331\057\uff91\001\002\000\006\016" +
    "\361\021\142\001\002\000\050\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\057\uffd3\001\002\000\004\056\363\001" +
    "\002\000\006\011\uff9e\021\uff9e\001\002\000\006\011\uff9f" +
    "\021\uff9f\001\002\000\070\003\062\010\037\012\065\015" +
    "\032\033\055\034\061\035\047\036\056\041\100\042\111" +
    "\043\043\044\060\045\067\046\102\047\054\051\073\052" +
    "\070\053\103\054\064\055\076\056\112\060\040\061\016" +
    "\062\012\063\034\064\007\065\006\001\002\000\072\003" +
    "\062\010\037\012\065\015\032\020\367\033\055\034\061" +
    "\035\047\036\056\041\100\042\111\043\043\044\060\045" +
    "\067\046\102\047\054\051\073\052\070\053\103\054\064" +
    "\055\076\056\112\060\040\061\016\062\012\063\034\064" +
    "\007\065\006\001\002\000\020\002\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\020\002" +
    "\ufffe\060\022\061\016\062\012\063\017\064\007\065\006" +
    "\001\002\000\020\002\ufffa\060\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\001\002\000\020\002\ufffc\060\022" +
    "\061\016\062\012\063\017\064\007\065\006\001\002\000" +
    "\004\002\001\001\002\000\020\002\ufffd\060\022\061\016" +
    "\062\012\063\017\064\007\065\006\001\002\000\004\010" +
    "\376\001\002\000\004\011\377\001\002\000\004\017\u0100" +
    "\001\002\000\070\003\062\010\037\012\065\015\032\033" +
    "\055\034\061\035\047\036\056\041\100\042\111\043\043" +
    "\044\060\045\067\046\102\047\054\051\073\052\070\053" +
    "\103\054\064\055\076\056\112\060\040\061\016\062\012" +
    "\063\034\064\007\065\006\001\002\000\072\003\062\010" +
    "\037\012\065\015\032\020\u0102\033\055\034\061\035\047" +
    "\036\056\041\100\042\111\043\043\044\060\045\067\046" +
    "\102\047\054\051\073\052\070\053\103\054\064\055\076" +
    "\056\112\060\040\061\016\062\012\063\034\064\007\065" +
    "\006\001\002\000\020\002\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\016\002\010\003\003\004\007\005\012\040" +
    "\014\041\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\373\040" +
    "\014\041\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\367\040\370\041\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\024\041\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\361\001\001\000\002\001\001\000" +
    "\070\006\065\011\047\013\032\014\105\015\062\016\041" +
    "\017\050\020\044\022\070\024\071\025\107\026\076\027" +
    "\034\030\103\031\056\033\030\034\106\035\100\036\043" +
    "\041\074\042\051\044\073\045\052\046\104\047\045\050" +
    "\035\052\040\001\001\000\002\001\001\000\034\006\137" +
    "\011\047\013\032\014\105\015\062\016\041\017\050\020" +
    "\044\021\357\033\030\046\120\050\035\052\040\001\001" +
    "\000\004\010\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\047\013\304\014\105" +
    "\015\354\016\041\017\050\020\044\033\030\046\120\050" +
    "\035\052\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\006\065\011" +
    "\047\013\032\014\105\015\062\016\041\017\050\020\044" +
    "\022\070\024\071\025\107\026\076\027\034\030\103\031" +
    "\056\033\030\034\106\035\152\041\074\042\051\044\073" +
    "\045\052\046\104\047\045\050\035\052\040\001\001\000" +
    "\004\007\274\001\001\000\002\001\001\000\024\011\047" +
    "\014\105\016\270\017\156\020\044\033\030\046\120\050" +
    "\035\052\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\246\011\047\013\032\014\105\015\062\016\041\017" +
    "\050\020\044\033\030\046\120\050\035\052\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\163\001" +
    "\001\000\002\001\001\000\004\051\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\217\055\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\112\001\001\000\002\001" +
    "\001\000\016\032\130\033\133\050\035\052\040\053\135" +
    "\054\125\001\001\000\002\001\001\000\032\006\116\011" +
    "\047\013\032\014\105\015\062\016\041\017\050\020\044" +
    "\033\030\046\120\050\035\052\040\001\001\000\002\001" +
    "\001\000\004\043\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\137\011\047\013\032\014\105\015\062\016\041\017" +
    "\050\020\044\021\140\033\030\046\120\050\035\052\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\143\011\047\013\032\014\105\015\062\016\041\017\050" +
    "\020\044\033\030\046\120\050\035\052\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\033\133\050\035" +
    "\052\040\053\135\054\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\006\065\011\047\013\032\014\105" +
    "\015\062\016\041\017\050\020\044\022\070\024\071\025" +
    "\107\026\076\027\034\030\103\031\056\033\030\034\106" +
    "\035\100\036\150\041\074\042\051\044\073\045\052\046" +
    "\104\047\045\050\035\052\040\001\001\000\066\006\065" +
    "\011\047\013\032\014\105\015\062\016\041\017\050\020" +
    "\044\022\070\024\071\025\107\026\076\027\034\030\103" +
    "\031\056\033\030\034\106\035\152\041\074\042\051\044" +
    "\073\045\052\046\104\047\045\050\035\052\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\047\014\105\015\155\016\041\017\156\020\044" +
    "\033\030\046\120\050\035\052\040\001\001\000\004\012" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\047\014\105\016\164\017\156\020\044\033\030\046\120" +
    "\050\035\052\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\171\011\047\013\032" +
    "\014\105\015\062\016\041\017\050\020\044\033\030\046" +
    "\120\050\035\052\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\047\014\105\015\203\016\041\017\156\020\044\033\030" +
    "\046\120\050\035\052\040\001\001\000\004\012\163\001" +
    "\001\000\002\001\001\000\070\006\065\011\047\013\032" +
    "\014\105\015\062\016\041\017\050\020\044\022\070\024" +
    "\071\025\107\026\076\027\034\030\103\031\056\033\030" +
    "\034\106\035\100\036\206\041\074\042\051\044\073\045" +
    "\052\046\104\047\045\050\035\052\040\001\001\000\066" +
    "\006\065\011\047\013\032\014\105\015\062\016\041\017" +
    "\050\020\044\022\070\024\071\025\107\026\076\027\034" +
    "\030\103\031\056\033\030\034\106\035\152\041\074\042" +
    "\051\044\073\045\052\046\104\047\045\050\035\052\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\212\011\047\013\032\014\105\015\062\016\041\017\050" +
    "\020\044\033\030\046\120\050\035\052\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\047\014\105" +
    "\015\223\016\041\017\156\020\044\033\030\046\120\050" +
    "\035\052\040\001\001\000\004\012\163\001\001\000\002" +
    "\001\001\000\070\006\065\011\047\013\032\014\105\015" +
    "\062\016\041\017\050\020\044\022\070\024\071\025\107" +
    "\026\076\027\034\030\103\031\056\033\030\034\106\035" +
    "\100\036\226\041\074\042\051\044\073\045\052\046\104" +
    "\047\045\050\035\052\040\001\001\000\066\006\065\011" +
    "\047\013\032\014\105\015\062\016\041\017\050\020\044" +
    "\022\070\024\071\025\107\026\076\027\034\030\103\031" +
    "\056\033\030\034\106\035\152\041\074\042\051\044\073" +
    "\045\052\046\104\047\045\050\035\052\040\001\001\000" +
    "\002\001\001\000\026\011\047\014\105\015\231\016\041" +
    "\017\156\020\044\033\030\046\120\050\035\052\040\001" +
    "\001\000\004\012\163\001\001\000\002\001\001\000\070" +
    "\006\065\011\047\013\032\014\105\015\062\016\041\017" +
    "\050\020\044\022\070\024\071\025\107\026\076\027\034" +
    "\030\103\031\056\033\030\034\106\035\100\036\234\041" +
    "\074\042\051\044\073\045\052\046\104\047\045\050\035" +
    "\052\040\001\001\000\066\006\065\011\047\013\032\014" +
    "\105\015\062\016\041\017\050\020\044\022\070\024\071" +
    "\025\107\026\076\027\034\030\103\031\056\033\030\034" +
    "\106\035\152\041\074\042\051\044\073\045\052\046\104" +
    "\047\045\050\035\052\040\001\001\000\002\001\001\000" +
    "\070\006\065\011\047\013\032\014\105\015\062\016\041" +
    "\017\050\020\044\022\070\024\071\025\107\026\076\027" +
    "\034\030\103\031\056\033\030\034\106\035\100\036\237" +
    "\041\074\042\051\044\073\045\052\046\104\047\045\050" +
    "\035\052\040\001\001\000\066\006\065\011\047\013\032" +
    "\014\105\015\062\016\041\017\050\020\044\022\070\024" +
    "\071\025\107\026\076\027\034\030\103\031\056\033\030" +
    "\034\106\035\152\041\074\042\051\044\073\045\052\046" +
    "\104\047\045\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\047\014\105\015\251\016\041\017" +
    "\156\020\044\033\030\046\120\050\035\052\040\001\001" +
    "\000\004\012\163\001\001\000\002\001\001\000\070\006" +
    "\065\011\047\013\032\014\105\015\062\016\041\017\050" +
    "\020\044\022\070\024\071\025\107\026\076\027\034\030" +
    "\103\031\056\033\030\034\106\035\100\036\254\041\074" +
    "\042\051\044\073\045\052\046\104\047\045\050\035\052" +
    "\040\001\001\000\066\006\065\011\047\013\032\014\105" +
    "\015\062\016\041\017\050\020\044\022\070\024\071\025" +
    "\107\026\076\027\034\030\103\031\056\033\030\034\106" +
    "\035\152\041\074\042\051\044\073\045\052\046\104\047" +
    "\045\050\035\052\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\260\011\047\013\032\014\105\015" +
    "\062\016\041\017\050\020\044\033\030\046\120\050\035" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\137\011\047\013\032\014\105\015\062\016\041\017" +
    "\050\020\044\021\266\033\030\046\120\050\035\052\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\047\017\156\020\303\033\030\046\120\050" +
    "\035\052\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\047\013" +
    "\304\017\305\033\030\046\120\050\035\052\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\047\017\316" +
    "\033\030\046\120\050\035\052\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\323\042\325\044\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\333\011\047\013\032\014\105\015\062\016" +
    "\041\017\050\020\044\033\030\046\120\050\035\052\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\047" +
    "\014\105\015\336\016\041\017\156\020\044\033\030\046" +
    "\120\050\035\052\040\001\001\000\004\012\163\001\001" +
    "\000\032\006\340\011\047\013\032\014\105\015\062\016" +
    "\041\017\050\020\044\033\030\046\120\050\035\052\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\006" +
    "\065\011\047\013\032\014\105\015\062\016\041\017\050" +
    "\020\044\022\070\024\071\025\107\026\076\027\034\030" +
    "\103\031\056\033\030\034\106\035\100\036\343\041\074" +
    "\042\051\044\073\045\052\046\104\047\045\050\035\052" +
    "\040\001\001\000\066\006\065\011\047\013\032\014\105" +
    "\015\062\016\041\017\050\020\044\022\070\024\071\025" +
    "\107\026\076\027\034\030\103\031\056\033\030\034\106" +
    "\035\152\041\074\042\051\044\073\045\052\046\104\047" +
    "\045\050\035\052\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\350\011\047\013" +
    "\032\014\105\015\062\016\041\017\050\020\044\033\030" +
    "\046\120\050\035\052\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\006\065\011\047\013" +
    "\032\014\105\015\062\016\041\017\050\020\044\022\070" +
    "\024\071\025\107\026\076\027\034\030\103\031\056\033" +
    "\030\034\106\035\100\036\365\041\074\042\051\044\073" +
    "\045\052\046\104\047\045\050\035\052\040\001\001\000" +
    "\066\006\065\011\047\013\032\014\105\015\062\016\041" +
    "\017\050\020\044\022\070\024\071\025\107\026\076\027" +
    "\034\030\103\031\056\033\030\034\106\035\152\041\074" +
    "\042\051\044\073\045\052\046\104\047\045\050\035\052" +
    "\040\001\001\000\002\001\001\000\010\005\371\040\014" +
    "\041\013\001\001\000\002\001\001\000\006\040\370\041" +
    "\013\001\001\000\002\001\001\000\006\040\370\041\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\006\065\011\047\013\032\014\105\015\062" +
    "\016\041\017\050\020\044\022\070\024\071\025\107\026" +
    "\076\027\034\030\103\031\056\033\030\034\106\035\100" +
    "\036\u0100\041\074\042\051\044\073\045\052\046\104\047" +
    "\045\050\035\052\040\001\001\000\066\006\065\011\047" +
    "\013\032\014\105\015\062\016\041\017\050\020\044\022" +
    "\070\024\071\025\107\026\076\027\034\030\103\031\056" +
    "\033\030\034\106\035\152\041\074\042\051\044\073\045" +
    "\052\046\104\047\045\050\035\052\040\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    //indica si se ha encontrado un error durante el analisis
    Boolean errores = false;

    //estructuras que almacenaran los simbolos de manera temporal durante
    //la creacion de las tablas de simbolos
    ListaElementosTabla listaParametros = new ListaElementosTabla();
    ListaElementosTabla listaVariables = new ListaElementosTabla();
    ArrayList<ASTNode> listaRetornos = new ArrayList<>();

    //estructura que almacena representaciones de las funciones que se hayan encontrado
    List<Funcion> functions = new ArrayList<Funcion>();

    //estructura que almacena las tablas de simbolos definidas
    SymbolTableStack symbolTables = new SymbolTableStack();
    
    /*
    *existeFuncion
    *E::nombre: nombre de la funcion a comprobar su existencia
    *S::Valor booleano que indica la existencia de una funcion
    *R::el nombre de la funcion debe ser un string
    *O::comprobar si una funcion ya fue definidas
    */
    private Boolean existeFuncion(String nombre){
        for(Funcion funcion : functions){
            if(funcion.getName() == nombre){
                return true;
            }
        }
        return false;
    }

    /*
    *getSymbolTableStack
    *E::ninguna
    *S::Tablas de simbolos que han sido creadas
    *R::ningua
    *O::Retornar las tablas de simbolos que han sido creadas
    */
    public SymbolTableStack getSymbolTableStack() {
        return symbolTables;
    }

    
    /*
    *getErrores
    *E::ningua
    *S::valor booleano que indica la existencia de algun error
    *R::ninguna
    *O::indicar si durante el parseo se encontro algun error
    */
    public Boolean getErrores(){
        return errores;
    }

//########################################################################

    /*
    *tiposCompatibles
    *E::tipo1: tipo de dato a comparar, tipo2: tipo de dato a comparar
    *S::valor booleano que indica si los tipos son compatibles
    *R::ninguna
    *O::comprobar si dos tipos de datos son compatibles
    */
    public boolean tiposCompatibles(String tipo1, String tipo2){
        if(tipo1.equals("float") && tipo2.equals("int")){
            return true;
        }
        else if (tipo1.equals("String") && tipo2.equals("char")){
            return true;
        }
        else if (tipo1.equals(tipo2)){
            return true;
        }
        else{
            return false;
        }
    }

    /*
    *checkDeclaraVar
    *E::tipo: tipo de dato a comparar, node: nodo que contiene el valor a comparar
    *S::valor booleano que indica si el valor es compatible con el tipo de la variable
    *R::ninguna
    *O::comprobar si el valor de una variable es compatible con su tipo
    */
    public boolean checkDeclaraVar(String tipo, ASTNode node){
        String valor = node.getChildren().get(0).getType();
        switch (valor) {
            case "literal_int":
                return tipo.equals("int") || tipo.equals("float");
            case "literal_bool":
                return tipo.equals("bool");
            case "literal_string":
                return tipo.equals("String");
            case "literal_float":
                return tipo.equals("float");
            case "literal_char":
                return tipo.equals("char");
            case "array":
                boolean arrayValido = true;
                for(ASTNode child : node.getChildren().get(0).getChildren()){
                    if(!checkDeclaraVar(tipo, child)){
                        System.out.println("Error: El arreglo contiene un valor incompatible con el tipo de dato");
                        arrayValido = false;
                    }else{
                        arrayValido = true;
                    }
                }
                return arrayValido;

            case "IDENTIFIER":
                String varName = node.getChildren().get(0).getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);    
                return tiposCompatibles(tipo, varTipo);
            case "llamaFuncion":
                String funName = node.getChildren().get(0).getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(node.getChildren().get(0).getChildren().size()>1)
                    funArg = node.getChildren().get(0).getChildren().get(1).getChildren();
                if(!funcionValida(funName, tipo, funArg).equals("invalida")){
                    return true;
                }else{
                    return false;
                }
            case "expresionBinaria":
                String valida = checkExpresion(node.getChildren().get(0));
                return tiposCompatibles(tipo, valida);
            case "operadorUnario":
                ASTNode opUnario = node.getChildren().get(0);
                String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
                switch(tipoOperando){
                    case "IDENTIFIER":
                        String idName = opUnario.getChildren().get(2).getValue().toString();
                        String idTipo = simboloValido(idName);
                        return tiposCompatibles(tipo, idTipo);
                    case "expresionNumerica":
                        return tipo.equals("int") || tipo.equals("float");
                    default:
                        return false;
                }
            default:
                return false;
        }
    }

    /*
    *checkExpresion
    *E::node: nodo que contiene la expresion a comparar
    *S::tipo de dato de la expresion
    *R::ninguna
    *O::comprobar el tipo de dato de una expresion comparando sus operandos
    */
    public String checkExpresion(ASTNode node){ //operandos izquierdos
        ArrayList<ASTNode> hijos = node.getChildren();
        ASTNode left = (ASTNode) hijos.get(2).getValue();
        ASTNode right = (ASTNode) hijos.get(3).getValue();
        String tipoOp = right.getType();
        switch(left.getType()){
            case "literal_int":
                if(tipoOp.equals("literal_int")){
                    return "int";
                }
                else if(tipoOp.equals("literal_float")){
                    return "float";
                }
                else if(checkExpresionAux(right, "int")){
                    return "int";
                }
                else if(checkExpresionAux(right, "float")){
                    return "float";
                }
                else{
                    return "invalida";
                }
            case "literal_string":
                if(tipoOp.equals("literal_string") || tipoOp.equals("literal_char")){
                    return "String";
                }
                else{
                    if(checkExpresionAux(right, "String")){
                        return "String";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_float":
                if(tipoOp.equals("literal_int") || tipoOp.equals("literal_float")){
                    return "float";
                }
                else{
                    if(checkExpresionAux(right, "int") || checkExpresionAux(right, "float")){
                        return "float";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_char":
                if(tipoOp.equals("literal_char")){
                    return "char";
                }
                else{
                    if(checkExpresionAux(right, "char")){
                        return "char";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_bool":
                if(tipoOp.equals("literal_bool")){
                    return "bool";
                }
                else{
                    if(checkExpresionAux(right, "bool")){
                        return "bool";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "IDENTIFIER":
                String varName = left.getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);
                if(checkExpresionAux(right, varTipo)){
                        return varTipo;
                }
                else{
                    return "invalida";
                }
            case "llamaFuncion":
                String funName = left.getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(left.getChildren().size()>1)
                    funArg = left.getChildren().get(1).getChildren();
                String tipoFuncion = funcionValida(funName, "getTipo", funArg);
                if(checkExpresionAux(right, tipoFuncion)){
                        return tipoFuncion;
                }else{
                    return "invalida";
                }

            case "expresionBinaria":
                if(left.getChildren().get(0).getValue().toString().equals("expresionAritmetica")){
                    String tipoExp = checkExpresion(left);
                    if(checkExpresionAux(right, tipoExp)){
                        return tipoExp;
                    }else{
                        return "invalida";
                    }
                }else{
                    return "bool";
                }
            //case "operadorUnario":
            //    ASTNode opUnario = node.getChildren().get(0);
            //    System.out.println(opUnario.toString());
            //    String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
            //    switch(tipoOperando){
            //        case "IDENTIFIER":
            //            String idName = opUnario.getChildren().get(2).getValue().toString();
            //            String idTipo = simboloValido(idName);
            //            if(tipoOp.equals("int")){
            //                return "int";
            //            }
            //            else if(tipoOp.equals("float")){
            //                return "float";
            //            }
            //            else{
            //                return "invalida";
            //            }
            //        case "expresionNumerica":
            //            if(tipoOp.equals("int")){
            //                return "int";
            //            }
            //            else if(tipoOp.equals("float")){
            //                return "float";
            //            }
            //            else{
            //                return "invalida";
            //            }
            //        default:
            //            return "invalida";
            //    }
            default:
                return "invalida";
        }
    }

    /*
    *checkExpresionAux
    *E: ASTNode right: nodo a la derecha del operador, String tipoCheck: tipo del nodo a la izquierda del operador
    *S: booleano que indica si la expresion es posible o no
    *R: right debe ser un nodo valido, tipoCheck debe ser un tipo valido
    *O: verifica si la expresion es posible o no segun los tipos de los nodos
    */
    public boolean checkExpresionAux(ASTNode right, String tipoCheck){
        String tipoOp = right.getType();
        switch(tipoOp){
            case "literal_int":
                return tipoCheck.equals("int") || tipoCheck.equals("float");
            case "literal_bool":
                return tipoCheck.equals("bool");
            case "literal_string":
                return tipoCheck.equals("String")|| tipoCheck.equals("char");
            case "literal_float":
                return tipoCheck.equals("float") ;
            case "literal_char":
                return tipoCheck.equals("char");
            case "IDENTIFIER":
                String varName = right.getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);
                return tiposCompatibles(tipoCheck, varTipo);
            case "llamaFuncion":
                String funName = right.getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(right.getChildren().size()>1)
                    funArg = right.getChildren().get(1).getChildren();
                if(!funcionValida(funName, tipoCheck, funArg).equals("invalida")){
                    return true;
                }else{
                    return false;
                }

            case "expresionBinaria":
                String tipoExp = checkExpresion(right);
                if(!tipoExp.equals("invalida")){
                    return true;
                }else{
                    return false;
                }
            //case "operadorUnario":
            //    ASTNode opUnario = right.getChildren().get(0);
            //    System.out.println(opUnario.toString());
            //    String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
            //    switch(tipoOperando){
            //        case "IDENTIFIER":
            //            String idName = opUnario.getChildren().get(2).getValue().toString();
            //            String idTipo = simboloValido(idName);
            //            return tiposCompatibles(tipoCheck, idTipo);
            //        case "expresionNumerica":
            //            return tipoCheck.equals("int") || tipoCheck.equals("float");
            //        default:
            //            return false;
            //    }
            default:
                return false;
        }
    }

    /*
    *simboloValido
    *E: String varName: nombre de la variable a buscar
    *S: String con el tipo de la variable
    *R: varName debe ser un nombre valido, la variable debe estar declarada
    *O: busca la variable en la lista de variables y parametros y retorna su tipo
    */
    public String simboloValido(String varName){
        String varTipo = listaParametros.existe(varName);
        String varTipo1 = listaVariables.existe(varName);
        if(varTipo != null){
            return varTipo;
        }    
        else if(varTipo1 != null){
            return varTipo1;
        }else{
            System.out.println("Error: "+varName+" no coincide con ningun simbolo declarado previamente");
            return null;
        }
    }

    /*
    *funcionValida
    *E: String funName: nombre de la funcion a buscar, String tipo: tipo de retorno de la funcion, ArrayList<ASTNode> argumentos: lista de argumentos de la funcion
    *S: String con el tipo de retorno de la funcion
    *R: funName debe ser un nombre valido, la funcion debe estar declarada, sino retorna invalida
    *O: busca la funcion en la lista de funciones y verifica que los tipos de los argumentos sean compatibles con los tipos de los parametros
    */
    public String funcionValida(String funName, String tipo, ArrayList<ASTNode> argumentos){
        for (Funcion f : functions) {
            if(tipo.equals("getTipo")){
                tipo = f.getTipoRetorno();
            }
            if (f.getName().equals(funName) && tiposCompatibles(tipo, f.getTipoRetorno())){
                int i = 0;
                List<ElementoTabla> parametros = f.getParameters();
                if(parametros.size()==argumentos.size()){//la funcion y su llamada tienen la misma cantidad de parametros
                    boolean res = true;
                    for(ElementoTabla e : parametros){
                        Object valorArg = argumentos.get(i).getValue();
                        String tipoArg = argumentos.get(i).getType();
                        switch(tipoArg){
                            case "IDENTIFIER":
                                String varTipo = simboloValido(valorArg.toString());
                                res = tiposCompatibles(e.getType(), varTipo);
                                break;
                            case "literal_string":
                                res = e.getType().equals("String");
                                break;
                            case "literal_int":
                                res = e.getType().equals("int") || e.getType().equals("float");
                                break;
                            case "literal_float":
                                res = e.getType().equals("float");
                                break;
                            case "literal_char":
                                res = e.getType().equals("char") || e.getType().equals("String");
                                break;
                            case "llamaFuncion":
                                String funNameNest = ((ASTNode)valorArg).getChildren().get(0).getValue().toString();
                                ArrayList<ASTNode> funArg = new ArrayList<>();
                                if(((ASTNode)valorArg).getChildren().size()>1)
                                    funArg = ((ASTNode)valorArg).getChildren().get(1).getChildren();
                                res = !funcionValida(funNameNest, e.getType(), funArg).equals("invalida");
                                break;
                            default:
                                res = false;
                                break;
                        }
                        i++;
                    }
                    if(res)
                    return tipo;
                }
                System.out.println("Error: "+funName + " esperaba " + parametros.size() + " argumentos pero " + argumentos.size() + " fueron recibidos");
                return "invalida";

            }
        }
        return "invalida";
    }

    /*
    checkReturnsBloque
    E: ASTNode bloque: bloque de codigo a revisar
    S: booleano que indica si el bloque tiene o no un return
    R: bloque debe ser un bloque valido
    O: revisa si el bloque tiene un return, si lo tiene lo agrega a la lista de retornos
        utilizado para comprobar que la funcion tenga un return
    */
    public boolean checkReturnsBloque(ASTNode bloque){
        int cantReturn = 0;
        for(ASTNode sentencia : bloque.getChildren()){
            if(sentencia.getType().equals("returnStm")){
                listaRetornos.add(sentencia);
                cantReturn++;
            }
        }
        if(cantReturn <= 1){
            return true;
        }
        return false;
    }

    /*
    *checkDeclaraArray
    *E: ASTNode node: nodo a revisar
    *S: booleano que indica si todos los valores del array son del tipo del array
    *R: node debe ser un nodo valido
    *O: revisa si todos los valores del array son del tipo del array
    */
    public boolean checkDeclaraArray(ASTNode node){
        if(node.getType().equals("declaraArray")){
            String tipo = node.getChildren().get(0).getValue().toString();
            String nombre = node.getValue().toString();
            int tam = Integer.parseInt(node.getChildren().get(1).getValue().toString());
            String tipoArray = listaVariables.existe(nombre);
            if(tipoArray == null){
                ArrayList<ASTNode> valores = node.getChildren().get(2).getChildren();
                for(ASTNode valor : valores){
                    if(!checkDeclaraVar(tipo, valor)){
                        System.out.println("Error: el tipo de los valores del array "+nombre+" no coinciden con el tipo del array");
                        return false;
                    }
                }
                listaVariables.addParameter(new ElementoTabla(nombre, tipo, tam));
                return true;
            }else{
                System.out.println("Error: "+nombre+" ya fue declarado");
                return false;
            }
        }
        return false;
    }


    //instancia del analizador lexico creado en jflex
    Analizador s;
    parser(Analizador s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("### Parseo finalizado ###");
        ASTNode inicio = new ASTNode("inicio");
        inicio.addChild((ASTNode)e);
        RESULT = inicio;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //construccion del nodo para el arbol sintactico
        ASTNode programa = new ASTNode("programa");
        programa.addChild((ASTNode)e);
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= funciones main 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)f).setType("programa");
        ((ASTNode)f).addChild((ASTNode)m);
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= main funciones 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        ASTNode programa = new ASTNode("programa");
        programa.addChild((ASTNode)m);
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= funciones main funciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        ASTNode programa = new ASTNode("programa");
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        programa.addChild((ASTNode)m);
        bNode = (ASTNode)e;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico 
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t )){
                System.out.println("Error: La funcion "+ (String) t +"  " + e + " ya fue declarada");
                errores = true;
                valida = false;
                existe = true;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Error: El simbolo " +  par.getName() + " ya fue declarado en esta función");
                    valida = false;
                    errores = true;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);  
        }
        
        ASTNode main = new ASTNode("declaraFuncion","main");
        if(!((ASTNode) d).navigateAST()){
            System.out.println("Error: main no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)d)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet);
            if(!validReturn){
                valida = false;
                System.out.println("Error: El tipo de retorno de main no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) d);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones declaraFuncion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("declaraFuncion");
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)d);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= declaraFuncion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("declaraFuncion");
        res.addChild((ASTNode)d);
        RESULT = res;

        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= expresionLogica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("init");
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= expresionAritmetica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("init");
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operadorArit ::= MAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operadorArit ::= MENOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operadorArit ::= MULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorArit ::= DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorArit ::= MODULO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opRelacional ::= MENOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opRelacional ::= MENORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opRelacional ::= MAYOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opRelacional ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opRelacional ::= EQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opRelacional ::= NOTEQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorUnario ::= MENOS numerico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","expresionNumerica");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", (ASTNode)e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorUnario ::= MENOS IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorLogico ::= AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorLogico ::= REXC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionAritmetica ::= operandoArit 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT =(ASTNode)e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionAritmetica ::= expresionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionBinaria = new ASTNode("tipo","expresionAritmetica");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("expresionBinaria");
        res.addChild((ASTNode)expresionBinaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("left",(ASTNode)ex));
        res.addChild(new ASTNode("right",(ASTNode)e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionRelacional ::= operandoRel opRelacional operandoRel 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //construccion del nodo para el arbol sintactico
    ASTNode expresionBinaria = new ASTNode("tipo","expresionRelacional");
    ASTNode res = new ASTNode("expresionBinaria");
    res.addChild((ASTNode)expresionBinaria);
    res.addChild(new ASTNode("operador",op));
    res.addChild(new ASTNode("left",(ASTNode)a));
    res.addChild(new ASTNode("right",(ASTNode)b));
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionLogica ::= terminoLogico 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode terminoLogico = new ASTNode("terminoLogico");
        terminoLogico.addChild((ASTNode)t);
        RESULT = (ASTNode)t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionLogica ::= expresionLogica operadorLogico terminoLogico 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionBinaria = new ASTNode("expresionBinaria");
        expresionBinaria.addChild(new ASTNode("tipo","expresionLogica"));
        expresionBinaria.addChild(new ASTNode("operador",op));
        expresionBinaria.addChild(new ASTNode("left",(ASTNode)ex));
        expresionBinaria.addChild(new ASTNode("right",(ASTNode)e));
        RESULT = expresionBinaria;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // terminoLogico ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_bool = new ASTNode("literal_bool");
        literal_bool.addChild(new ASTNode(b));
        RESULT = (literal_bool);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // terminoLogico ::= expresionRelacional 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionRelacional = new ASTNode("expresionBinaria");
        expresionRelacional.addChild((ASTNode)r);
        RESULT = (ASTNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // terminoLogico ::= NOT terminoLogico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode notOp = new ASTNode("notOp");
        notOp.addChild((ASTNode)t);
        ASTNode res =  new ASTNode("res");
        res.addChild(notOp);
        RESULT = (res);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // terminoLogico ::= LPAREN expresionLogica RPAREN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionLogica = new ASTNode("expresionBinaria");
        expresionLogica.addChild((ASTNode)r);
        RESULT = (ASTNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operandoArit ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode IDENTIFIER = new ASTNode("IDENTIFIER");
        IDENTIFIER.addChild(new ASTNode("valor",e));
        RESULT = IDENTIFIER;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operandoArit ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_string = new ASTNode("literal_string");
        literal_string.addChild(new ASTNode(e));
        RESULT = literal_string;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operandoArit ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_int");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operandoArit ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_float = new ASTNode("literal_float");
        literal_float.addChild(new ASTNode(e));
        RESULT = literal_float;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operandoArit ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_char = new ASTNode("literal_char");
        literal_char.addChild(new ASTNode(e));
        RESULT = literal_char;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operandoArit ::= llamaFuncion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("llamaFuncion");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operandoArit ::= operadorUnario 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("operadorUnario");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operandoArit ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operandoArit ::= getValorArray 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operandoArit ::= LPAREN expresionAritmetica RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operandoRel ::= operandoArit 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operandoRel ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_bool = new ASTNode("literal_bool");
        literal_bool.addChild(new ASTNode(b));
        RESULT = (literal_bool);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literales ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_int",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literales ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_float",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literales ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_bool",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literales ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_string",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literales ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_char",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literales ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ASTNode("array",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("array");
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // array ::= array COMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("array");
        ASTNode bNode = (ASTNode)a;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if ::= IF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        boolean valida = true;
        res.addChild(new ASTNode("tipo","ifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        //checkReturnsBloque((ASTNode)b);
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(checkExpresion((ASTNode)exp).equals("invalida")){
                valida = false;
            }
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elif ::= ELIF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elif ::= elif ELIF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        //res.addChild(new ASTNode("alternate","null"));
        ((ASTNode)e).addChild(new ASTNode("alternate",res));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else ::= ELSE LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elseStm"));
        res.addChild(new ASTNode("body",(ASTNode)b));
        RESULT = res;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","whileStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionLogica RPAREN DOLLAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","doWhileStm"));
        res.addChild(new ASTNode("body",(ASTNode)b));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }else{
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR LPAREN declaraVar DOLLAR expresionLogica DOLLAR expresion RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","forStm"));
        res.addChild(new ASTNode("init", (ASTNode)d));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("update", (ASTNode)e));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }else{
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructuraControl ::= if 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate", null));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructuraControl ::= if elif 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructuraControl ::= if elif else 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) ef));
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructuraControl ::= if else 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructuraControl ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructuraControl ::= doWhile 
            {
              Object RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = dw;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructuraControl ::= for 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return ::= RETURN expresion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)e).setType("value");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // break ::= BREAK 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argumento ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ASTNode("IDENTIFIER",e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumento ::= literales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // argumento ::= llamaFuncion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)e).setType("funcion");
        RESULT = new ASTNode("llamaFuncion",((ASTNode)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumentos ::= argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("argumentos");
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("argumentos");
        ASTNode bNode = (ASTNode)a;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamaFuncion ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode llamadaFuncion = new ASTNode("nombre", e);
        res.addChild(llamadaFuncion);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamaFuncion ::= IDENTIFIER LPAREN argumentos RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode llamadaFuncion = new ASTNode("nombre", e);
        res.addChild(llamadaFuncion);
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamaFuncion ::= lectura 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode lectura = new ASTNode("nombre","read");
        res.addChild(lectura);
        res.addChild((ASTNode)l);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFuncion ::= escritura 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode escritura = new ASTNode("nombre","print");
        res.addChild(escritura);
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion ::= IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(!checkDeclaraVar(simboloValido((String)e), (ASTNode)ex)){
            System.out.println("Error: variable no declarada");
            System.exit(0);
        }else{
            ASTNode asignacion = new ASTNode("asignacion", e);
            asignacion.addChild((ASTNode)ex);
            RESULT = asignacion;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= asignacion DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode estructuraControl = new ASTNode("estructuraControl");
        estructuraControl.addChild((ASTNode)a);
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= expresion DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("expresion");
        RESULT = (ASTNode)e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= declaraArray DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(((ASTNode)a).getValue().toString(),((ASTNode)a).getChildren().get(0).getValue().toString()));
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= declaraVar DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode declaraVar = new ASTNode("declaraVar");
        declaraVar.addChild((ASTNode)a);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= declaraVarNoAsig DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode declaraVar = new ASTNode("declaraVar");
        declaraVar.addChild((ASTNode)a);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= return DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode returnStm = new ASTNode("returnStm");
        returnStm.addChild((ASTNode)a);
        RESULT = returnStm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= break DOLLAR 
            {
              Object RESULT =null;
		
        //construccion del nodo para el arbol sintactico
        ASTNode breakStm = new ASTNode("breakStm");
        RESULT = breakStm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= getValorArray DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= setValorArray DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= error DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("##### Se ha encontrado un error de syntaxis, el parseo continuara"); 
        errores = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("bloque");
        res.addChild((ASTNode)s);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("bloque");
        ASTNode bNode = (ASTNode)b;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)s);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros ::= tipo IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        listaParametros.addParameter(new ElementoTabla(i,(String) t));
        ASTNode res = new ASTNode("parametros");
        res.addChild(new ASTNode((String)t,(String)i));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= parametros COMA tipo IDENTIFIER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaParametros.addParameter(new ElementoTabla(i,(String) t));
        ASTNode res = new ASTNode("parametros");
        ASTNode bNode = (ASTNode)p;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild(new ASTNode((String)t,(String)i));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaraFuncion ::= tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t)) {
                System.out.println("Error: La funcion "+ (String) t +"  " + e + " ya fue declarada");
                errores = true;
                existe = true;
                valida = false;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Error: Simbolo " +  par.getName() + " ya ha sido declarado en esta funcion");
                    errores = true;
                    valida = false;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);
        }
        
        ASTNode main = new ASTNode("declaraFuncion",e);
        if(!((ASTNode) b).navigateAST()){
            System.out.println("Error: "+e+" no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet);
            if(!validReturn){
                valida =false;
                System.out.println("Error: El tipo de retorno de "+e+" no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) p);
        main.addChild((ASTNode) b);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaraFuncion ::= tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t)) {
                System.out.println("La funcion \""+ (String) t +"  " + e + "\" ya fue declarada previamente");
                errores = true;
                existe = true;
                valida = false;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Simbolo " +  par.getName() + " ya ha sido declarado en esta funcion");
                    errores = true;
                    valida = false;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);
        }
        
        ASTNode main = new ASTNode("declaraFuncion",e);
        if(!((ASTNode) b).navigateAST()){
            System.out.println("Error: "+e+" no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet); 
            if(!validReturn){
                valida =false;
                System.out.println("Error: El tipo de retorno de "+e+" no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) b);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= ARRAY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaraArray ::= INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        //listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraArray", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild(new ASTNode("size",s));
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaraArray ::= CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        //listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraArray", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild(new ASTNode("size",s));
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArrayAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaraVarNoAsig ::= INT IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaraVarNoAsig ::= CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaraVarNoAsig ::= tipo IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaraVar ::= INT IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar(t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaraVar ::= CHAR IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar(t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaraVar ::= declaraArray ASIG LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)d).addChild( (ASTNode)e);
        if(checkDeclaraArray((ASTNode)d)){
            RESULT = (ASTNode)d;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaraVar ::= tipo IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar((String)t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // getValorArray ::= IDENTIFIER declaraArrayAux 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode getValorArray = new ASTNode("getValorArray",e);
        getValorArray.addChild(new ASTNode("posicion",d));
        res.addChild(getValorArray);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getValorArray",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // setValorArray ::= getValorArray ASIG expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode setValorArray = ((ASTNode)e).getChildren().get(0);
        setValorArray.setType("setValorArray");
        setValorArray.addChild(new ASTNode("value", (ASTNode)ex));
        RESULT = setValorArray;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setValorArray",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lectura ::= LEER LPAREN numerico RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = n;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lectura ::= LEER LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        String tipoId = simboloValido(n);
        if(tipoId.equals("int") || tipoId.equals("float")){
            ASTNode argumentos = new ASTNode("argumentos");
            ASTNode identifier = new ASTNode("IDENTIFIER",n);
            //identifier.addChild(new ASTNode(n));
            argumentos.addChild(identifier);
            RESULT = argumentos;
        }else{
            System.out.println("Error: print +"+n+" debe ser de tipo int o float pero es tipo "+ tipoId);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // numerico ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_int");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // numerico ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_float");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // escritura ::= ESCRIBIR LPAREN expresion RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode nodoValor = ((ASTNode)e).getChildren().get(0);
        String tipoNodo = nodoValor.getType();
        String valor;
        if(tipoNodo.equals("IDENTIFIER")){
            valor = nodoValor.getChildren().get(0).getValue().toString();
        }else{
            valor = nodoValor.getChildren().get(0).getType();
        }
        ASTNode argumento = new ASTNode("argumentos");
        argumento.addChild(new ASTNode(tipoNodo,valor));
        if(tipoNodo.equals("literal_int") || tipoNodo.equals("literal_float") || tipoNodo.equals("literal_string")){
            RESULT = argumento;
        }else if(tipoNodo.equals("IDENTIFIER")){
            String tipoId = simboloValido(nodoValor.getChildren().get(0).getValue().toString());    
            if(tipoId.equals("int") || tipoId.equals("float") || tipoId.equals("String")){
                RESULT = argumento;
            }
        }else{
            System.out.println("Error: print solo es compatible con int, float, y string");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
