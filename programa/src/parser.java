
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\005\004\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\011\002\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\005" +
    "\000\002\014\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\005\000\002\021\003" +
    "\000\002\021\005\000\002\022\011\000\002\023\011\000" +
    "\002\023\012\000\002\056\006\000\002\024\011\000\002" +
    "\025\013\000\002\026\015\000\002\027\003\000\002\027" +
    "\004\000\002\027\005\000\002\027\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\004\000" +
    "\002\031\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\032\003\000\002\032\005\000\002\033" +
    "\005\000\002\033\006\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\035\004\000\002\035\003\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\036\003" +
    "\000\002\036\004\000\002\037\004\000\002\037\006\000" +
    "\002\040\012\000\002\040\011\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\043\007\000\002\043\007\000" +
    "\002\044\005\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\045\006\000\002\045\006\000\002\045" +
    "\007\000\002\045\006\000\002\047\004\000\002\050\005" +
    "\000\002\051\006\000\002\051\006\000\002\052\003\000" +
    "\002\052\003\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\010\060\005\061\014\065\006\001\002\000" +
    "\004\002\000\001\002\000\006\056\uff9b\066\377\001\002" +
    "\000\004\056\uff99\001\002\000\004\056\023\001\002\000" +
    "\012\002\uffff\060\020\061\014\065\006\001\002\000\004" +
    "\002\021\001\002\000\010\060\005\061\014\065\006\001" +
    "\002\000\012\002\ufff9\060\ufff9\061\ufff9\065\ufff9\001\002" +
    "\000\004\056\uff9a\001\002\000\012\002\ufffe\060\020\061" +
    "\014\065\006\001\002\000\012\002\ufffa\060\ufffa\061\ufffa" +
    "\065\ufffa\001\002\000\012\002\ufffc\060\020\061\014\065" +
    "\006\001\002\000\004\056\uff9b\001\002\000\004\002\001" +
    "\001\002\000\012\002\ufffd\060\020\061\014\065\006\001" +
    "\002\000\004\010\024\001\002\000\020\011\031\060\025" +
    "\061\035\062\030\063\034\064\027\065\026\001\002\000" +
    "\004\056\uff98\001\002\000\004\056\uff93\001\002\000\004" +
    "\056\uff94\001\002\000\004\056\uff95\001\002\000\004\017" +
    "\374\001\002\000\004\056\373\001\002\000\006\011\037" +
    "\021\036\001\002\000\004\056\uff97\001\002\000\004\056" +
    "\uff96\001\002\000\016\060\025\061\035\062\030\063\034" +
    "\064\027\065\026\001\002\000\004\017\040\001\002\000" +
    "\120\003\072\007\uffea\010\047\012\075\013\uffea\015\042" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\065\034\071\035\057\036\066" +
    "\041\110\042\121\043\053\044\070\045\077\046\112\047" +
    "\063\051\103\052\100\053\113\054\074\055\106\056\122" +
    "\057\uffea\060\050\061\035\062\030\063\044\064\027\065" +
    "\026\001\002\000\050\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\016\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\057\uffd5\001\002\000\070\007\uffea\010\047\012" +
    "\075\013\uffea\015\042\016\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\065\034\071\035\057\046\112\047\063\051\103" +
    "\052\100\053\113\054\074\055\106\056\130\001\002\000" +
    "\026\007\320\011\ufff7\012\323\013\316\016\ufff7\021\ufff7" +
    "\024\324\031\321\032\322\057\ufff7\001\002\000\004\056" +
    "\366\001\002\000\122\003\uffab\007\uffab\010\uffab\012\uffab" +
    "\013\uffab\015\uffab\020\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\065\uffab\001\002\000\050\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\016" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\057\uffaf\001\002\000" +
    "\066\007\uffea\010\047\011\uffea\012\075\013\uffea\015\042" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\065\034\071\035\057\046\112" +
    "\047\063\051\103\052\100\053\113\054\074\055\106\056" +
    "\130\001\002\000\004\056\363\001\002\000\050\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\012\uffae\013\uffae\016" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\057\uffae\001\002\000" +
    "\020\004\uffe0\005\uffe0\006\uffe0\011\uffe0\016\uffe0\021\uffe0" +
    "\057\uffe0\001\002\000\004\010\330\001\002\000\122\003" +
    "\072\007\uffea\010\047\012\075\013\uffea\015\042\020\327" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\065\034\071\035\057\036\066" +
    "\041\110\042\121\043\053\044\070\045\077\046\112\047" +
    "\063\051\103\052\100\053\113\054\074\055\106\056\122" +
    "\057\uffea\060\050\061\035\062\030\063\044\064\027\065" +
    "\026\001\002\000\016\022\307\023\310\025\303\026\302" +
    "\027\305\030\306\001\002\000\004\057\301\001\002\000" +
    "\052\010\047\012\075\015\042\022\uffea\023\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\033\065\034\071\035\057\046" +
    "\112\047\063\051\103\052\100\053\113\054\074\055\106" +
    "\056\130\001\002\000\050\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\057\uffd4\001\002\000\042\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\016\uffe3\021\uffe3\022\uffd0\023\uffd0\024" +
    "\uffe3\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffe3\032\uffe3" +
    "\057\uffe3\001\002\000\006\014\274\057\273\001\002\000" +
    "\004\010\270\001\002\000\004\057\267\001\002\000\004" +
    "\056\266\001\002\000\004\010\260\001\002\000\004\057" +
    "\257\001\002\000\066\007\uffea\010\047\012\075\013\uffea" +
    "\015\042\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\065\034\071\035\057" +
    "\046\112\047\063\051\103\052\100\053\113\054\074\055" +
    "\106\056\130\057\uffea\001\002\000\004\056\255\001\002" +
    "\000\004\057\254\001\002\000\020\004\172\005\173\006" +
    "\171\011\ufff8\016\ufff8\021\ufff8\057\ufff8\001\002\000\050" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\016\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\057\uffd6\001" +
    "\002\000\004\056\253\001\002\000\004\057\252\001\002" +
    "\000\004\057\uffb7\001\002\000\050\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\057\uffd7\001\002\000\126\003\uffbf" +
    "\007\uffbf\010\uffbf\012\uffbf\013\uffbf\015\uffbf\020\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\226\040\225\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\001\002\000\122\003\uffbb\007\uffbb\010" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000" +
    "\050\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\057\uffd8" +
    "\001\002\000\004\057\224\001\002\000\004\056\221\001" +
    "\002\000\050\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\057\uffd9\001\002\000\122\003\uffb9\007\uffb9\010\uffb9\012" +
    "\uffb9\013\uffb9\015\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\004\010" +
    "\213\001\002\000\122\003\uffa1\007\uffa1\010\uffa1\012\uffa1" +
    "\013\uffa1\015\uffa1\020\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002\000\004\010\204" +
    "\001\002\000\034\004\uffde\005\uffde\006\uffde\011\uffde\016" +
    "\uffde\021\uffde\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\057\uffde\001\002\000\004\057\203\001\002\000" +
    "\036\007\uffd2\012\uffd2\013\uffd2\014\200\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\057\201\001\002\000\020\004\uffdd\005\uffdd\006\uffdd" +
    "\011\uffdd\016\uffdd\021\uffdd\057\uffdd\001\002\000\004\057" +
    "\177\001\002\000\122\003\uffba\007\uffba\010\uffba\012\uffba" +
    "\013\uffba\015\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\001\002\000\004\017\160" +
    "\001\002\000\042\007\uffda\010\124\012\uffda\013\uffda\014" +
    "\126\015\125\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\057\uffda\001\002\000" +
    "\052\004\uff88\005\uff88\006\uff88\007\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\016\uff88\021\uff88\022\uff88\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\057\uff88\001\002\000\026\011\143\015\147\046\112\047" +
    "\063\051\134\052\142\053\137\054\135\055\140\056\145" +
    "\001\002\000\004\051\132\001\002\000\066\007\uffea\010" +
    "\047\012\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\065\034\071\035\057\046\112\047\063\051\103\052\100" +
    "\053\113\054\074\055\106\056\130\057\uffea\001\002\000" +
    "\004\057\uffad\001\002\000\054\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\124\011\uffda\012\uffda\013\uffda\015\125\016" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\057\uffda\001\002\000" +
    "\050\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\016\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\057\uffd2" +
    "\001\002\000\004\016\133\001\002\000\052\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\016\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\057\uff90\001\002" +
    "\000\006\011\uffce\021\uffce\001\002\000\006\011\uffca\021" +
    "\uffca\001\002\000\006\011\uffb3\021\uffb3\001\002\000\006" +
    "\011\uffcc\021\uffcc\001\002\000\006\011\uffcb\021\uffcb\001" +
    "\002\000\006\011\156\021\155\001\002\000\006\011\uffcd" +
    "\021\uffcd\001\002\000\050\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\016\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\057\uffb1\001\002\000\006\011\uffb4\021\uffb4" +
    "\001\002\000\010\010\124\011\uffb6\021\uffb6\001\002\000" +
    "\006\011\uffb5\021\uffb5\001\002\000\070\007\uffea\010\047" +
    "\012\075\013\uffea\015\042\016\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\065\034\071\035\057\046\112\047\063\051" +
    "\103\052\100\053\113\054\074\055\106\056\130\001\002" +
    "\000\006\016\uffc8\021\uffc8\001\002\000\006\016\153\021" +
    "\152\001\002\000\070\007\uffea\010\047\012\075\013\uffea" +
    "\015\042\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065" +
    "\034\071\035\057\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\130\001\002\000\006\011\uffc9" +
    "\021\uffc9\001\002\000\006\016\uffc7\021\uffc7\001\002\000" +
    "\024\015\147\046\112\047\063\051\134\052\142\053\137" +
    "\054\135\055\140\056\145\001\002\000\050\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\016\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\057\uffb0\001\002\000\006" +
    "\011\uffb2\021\uffb2\001\002\000\120\003\072\007\uffea\010" +
    "\047\012\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\065\034\071\035\057\036\066\041\110\042\121\043\053" +
    "\044\070\045\077\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\122\057\uffea\060\050\061\035" +
    "\062\030\063\044\064\027\065\026\001\002\000\122\003" +
    "\072\007\uffea\010\047\012\075\013\uffea\015\042\020\162" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\065\034\071\035\057\036\066" +
    "\041\110\042\121\043\053\044\070\045\077\046\112\047" +
    "\063\051\103\052\100\053\113\054\074\055\106\056\122" +
    "\057\uffea\060\050\061\035\062\030\063\044\064\027\065" +
    "\026\001\002\000\004\041\164\001\002\000\122\003\uffa0" +
    "\007\uffa0\010\uffa0\012\uffa0\013\uffa0\015\uffa0\020\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\001\002\000\004\010\165\001\002\000\052\010\047\012" +
    "\075\015\042\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\033\065\034\071\035\057\046\112\047\063\051" +
    "\103\052\100\053\113\054\074\055\106\056\130\001\002" +
    "\000\012\004\172\005\173\006\171\011\170\001\002\000" +
    "\034\004\uffd0\005\uffd0\006\uffd0\011\uffd0\016\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\057" +
    "\uffd0\001\002\000\004\057\176\001\002\000\052\010\uffe6" +
    "\012\uffe6\015\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\033\uffe6\034\uffe6\035\uffe6\046\uffe6\047\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\001" +
    "\002\000\052\010\uffe4\012\uffe4\015\uffe4\022\uffe4\023\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\001\002\000\052\010\uffe5\012\uffe5\015" +
    "\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\046\uffe5\047\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\052" +
    "\010\047\012\075\015\042\022\uffea\023\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\033\065\034\071\035\057\046\112" +
    "\047\063\051\103\052\100\053\113\054\074\055\106\056" +
    "\130\001\002\000\020\004\uffdf\005\uffdf\006\uffdf\011\uffdf" +
    "\016\uffdf\021\uffdf\057\uffdf\001\002\000\122\003\uffc1\007" +
    "\uffc1\010\uffc1\012\uffc1\013\uffc1\015\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001" +
    "\002\000\122\003\uffac\007\uffac\010\uffac\012\uffac\013\uffac" +
    "\015\uffac\020\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\065\uffac\001\002\000\066\007\uffea\010\047" +
    "\012\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065" +
    "\034\071\035\057\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\130\057\uffea\001\002\000\122" +
    "\003\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4\015\uffa4\020" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\001\002\000\004\057\uff87\001\002\000\122\003" +
    "\uffa6\007\uffa6\010\uffa6\012\uffa6\013\uffa6\015\uffa6\020\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\001\002\000\010\051\206\052\210\056\207\001\002" +
    "\000\004\011\212\001\002\000\004\011\uff84\001\002\000" +
    "\004\011\211\001\002\000\004\011\uff83\001\002\000\050" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\011\uff85\012\uff85\013" +
    "\uff85\016\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\057\uff85\001" +
    "\002\000\050\004\uff86\005\uff86\006\uff86\007\uff86\011\uff86" +
    "\012\uff86\013\uff86\016\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\057\uff86\001\002\000\052\010\047\012\075\015\042\022" +
    "\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\065" +
    "\034\071\035\057\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\130\001\002\000\012\004\172" +
    "\005\173\006\171\011\215\001\002\000\004\017\216\001" +
    "\002\000\120\003\072\007\uffea\010\047\012\075\013\uffea" +
    "\015\042\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\065\034\071\035\057" +
    "\036\066\041\110\042\121\043\053\044\070\045\077\046" +
    "\112\047\063\051\103\052\100\053\113\054\074\055\106" +
    "\056\122\057\uffea\060\050\061\035\062\030\063\044\064" +
    "\027\065\026\001\002\000\122\003\072\007\uffea\010\047" +
    "\012\075\013\uffea\015\042\020\220\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\065\034\071\035\057\036\066\041\110\042\121\043" +
    "\053\044\070\045\077\046\112\047\063\051\103\052\100" +
    "\053\113\054\074\055\106\056\122\057\uffea\060\050\061" +
    "\035\062\030\063\044\064\027\065\026\001\002\000\122" +
    "\003\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\015\uffc2\020" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\001\002\000\006\014\222\057\uff8d\001\002\000" +
    "\066\007\uffea\010\047\012\075\013\uffea\015\042\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\065\034\071\035\057\046\112\047\063" +
    "\051\103\052\100\053\113\054\074\055\106\056\130\057" +
    "\uffea\001\002\000\004\057\uff89\001\002\000\122\003\uffa8" +
    "\007\uffa8\010\uffa8\012\uffa8\013\uffa8\015\uffa8\020\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\001\002\000\004\017\247\001\002\000\004\010\241\001" +
    "\002\000\122\003\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc" +
    "\015\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\001\002\000\126\003\uffbe\007\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\015\uffbe\020\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\231\040" +
    "\225\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\001\002\000\004\010\233\001\002\000\122\003" +
    "\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\015\uffbd\020\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\001\002\000\052\010\047\012\075\015\042\022\uffea" +
    "\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\065\034" +
    "\071\035\057\046\112\047\063\051\103\052\100\053\113" +
    "\054\074\055\106\056\130\001\002\000\012\004\172\005" +
    "\173\006\171\011\235\001\002\000\004\017\236\001\002" +
    "\000\120\003\072\007\uffea\010\047\012\075\013\uffea\015" +
    "\042\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\065\034\071\035\057\036" +
    "\066\041\110\042\121\043\053\044\070\045\077\046\112" +
    "\047\063\051\103\052\100\053\113\054\074\055\106\056" +
    "\122\057\uffea\060\050\061\035\062\030\063\044\064\027" +
    "\065\026\001\002\000\122\003\072\007\uffea\010\047\012" +
    "\075\013\uffea\015\042\020\240\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\065\034\071\035\057\036\066\041\110\042\121\043\053" +
    "\044\070\045\077\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\122\057\uffea\060\050\061\035" +
    "\062\030\063\044\064\027\065\026\001\002\000\126\003" +
    "\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\015\uffc4\020\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\001\002\000\052\010\047\012\075" +
    "\015\042\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\033\065\034\071\035\057\046\112\047\063\051\103" +
    "\052\100\053\113\054\074\055\106\056\130\001\002\000" +
    "\012\004\172\005\173\006\171\011\243\001\002\000\004" +
    "\017\244\001\002\000\120\003\072\007\uffea\010\047\012" +
    "\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034" +
    "\071\035\057\036\066\041\110\042\121\043\053\044\070" +
    "\045\077\046\112\047\063\051\103\052\100\053\113\054" +
    "\074\055\106\056\122\057\uffea\060\050\061\035\062\030" +
    "\063\044\064\027\065\026\001\002\000\122\003\072\007" +
    "\uffea\010\047\012\075\013\uffea\015\042\020\246\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\065\034\071\035\057\036\066\041\110" +
    "\042\121\043\053\044\070\045\077\046\112\047\063\051" +
    "\103\052\100\053\113\054\074\055\106\056\122\057\uffea" +
    "\060\050\061\035\062\030\063\044\064\027\065\026\001" +
    "\002\000\126\003\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5" +
    "\015\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\120" +
    "\003\072\007\uffea\010\047\012\075\013\uffea\015\042\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\065\034\071\035\057\036\066\041" +
    "\110\042\121\043\053\044\070\045\077\046\112\047\063" +
    "\051\103\052\100\053\113\054\074\055\106\056\122\057" +
    "\uffea\060\050\061\035\062\030\063\044\064\027\065\026" +
    "\001\002\000\122\003\072\007\uffea\010\047\012\075\013" +
    "\uffea\015\042\020\251\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034" +
    "\071\035\057\036\066\041\110\042\121\043\053\044\070" +
    "\045\077\046\112\047\063\051\103\052\100\053\113\054" +
    "\074\055\106\056\122\057\uffea\060\050\061\035\062\030" +
    "\063\044\064\027\065\026\001\002\000\122\003\uffc3\007" +
    "\uffc3\010\uffc3\012\uffc3\013\uffc3\015\uffc3\020\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\001" +
    "\002\000\122\003\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa" +
    "\015\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\001\002\000\050\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\057\uffe9\001\002\000\122\003" +
    "\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2\015\uffa2\020\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\001\002\000\050\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\016\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\057\uffe7\001\002\000\004\057\uffb8\001\002\000" +
    "\122\003\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\015\uffa5" +
    "\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\001\002\000\052\010\047\012\075\015\042" +
    "\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033" +
    "\065\034\071\035\057\046\112\047\063\051\103\052\100" +
    "\053\113\054\074\055\106\056\130\001\002\000\012\004" +
    "\172\005\173\006\171\011\262\001\002\000\004\017\263" +
    "\001\002\000\120\003\072\007\uffea\010\047\012\075\013" +
    "\uffea\015\042\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034\071\035" +
    "\057\036\066\041\110\042\121\043\053\044\070\045\077" +
    "\046\112\047\063\051\103\052\100\053\113\054\074\055" +
    "\106\056\122\057\uffea\060\050\061\035\062\030\063\044" +
    "\064\027\065\026\001\002\000\122\003\072\007\uffea\010" +
    "\047\012\075\013\uffea\015\042\020\265\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\065\034\071\035\057\036\066\041\110\042\121" +
    "\043\053\044\070\045\077\046\112\047\063\051\103\052" +
    "\100\053\113\054\074\055\106\056\122\057\uffea\060\050" +
    "\061\035\062\030\063\044\064\027\065\026\001\002\000" +
    "\126\003\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\050\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\016" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\057\uffe8\001\002\000" +
    "\122\003\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7" +
    "\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\001\002\000\066\007\uffea\010\047\011\uffea" +
    "\012\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065" +
    "\034\071\035\057\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\130\001\002\000\004\011\272" +
    "\001\002\000\050\004\uff82\005\uff82\006\uff82\007\uff82\011" +
    "\uff82\012\uff82\013\uff82\016\uff82\021\uff82\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\057\uff82\001\002\000\122\003\uffa9\007\uffa9\010\uffa9" +
    "\012\uffa9\013\uffa9\015\uffa9\020\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\001\002\000\004" +
    "\015\275\001\002\000\070\007\uffea\010\047\012\075\013" +
    "\uffea\015\042\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\065\034\071\035\057\046\112\047\063\051\103\052\100" +
    "\053\113\054\074\055\106\056\130\001\002\000\006\016" +
    "\277\021\152\001\002\000\004\057\uff8a\001\002\000\020" +
    "\004\uffdc\005\uffdc\006\uffdc\011\uffdc\016\uffdc\021\uffdc\057" +
    "\uffdc\001\002\000\122\003\uffa3\007\uffa3\010\uffa3\012\uffa3" +
    "\013\uffa3\015\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\052\004\uffed" +
    "\005\uffed\006\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016" +
    "\uffed\021\uffed\033\uffed\034\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\001" +
    "\002\000\052\004\uffef\005\uffef\006\uffef\010\uffef\011\uffef" +
    "\012\uffef\015\uffef\016\uffef\021\uffef\033\uffef\034\uffef\046" +
    "\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\001\002\000\052\004\uffea\005\uffea\006" +
    "\uffea\010\311\011\uffea\012\075\015\042\016\uffea\021\uffea" +
    "\033\065\034\071\046\112\047\063\051\103\052\100\053" +
    "\312\054\074\055\106\056\130\057\uffea\001\002\000\052" +
    "\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec\015" +
    "\uffec\016\uffec\021\uffec\033\uffec\034\uffec\046\uffec\047\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\001\002\000\052\004\uffeb\005\uffeb\006\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\015\uffeb\016\uffeb\021\uffeb\033\uffeb\034" +
    "\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\001\002\000\052\004\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\021\ufff0\033\ufff0\034\ufff0\046\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\052\004\uffee\005\uffee\006\uffee\010\uffee\011\uffee\012" +
    "\uffee\015\uffee\016\uffee\021\uffee\033\uffee\034\uffee\046\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\001\002\000\046\007\uffea\010\311\011\uffea" +
    "\012\075\013\uffea\015\042\024\uffea\031\uffea\032\uffea\033" +
    "\065\034\071\046\112\047\063\051\103\052\100\054\074" +
    "\055\106\056\130\001\002\000\020\004\uffcf\005\uffcf\006" +
    "\uffcf\011\uffcf\016\uffcf\021\uffcf\057\uffcf\001\002\000\020" +
    "\004\uffe1\005\uffe1\006\uffe1\011\uffe1\016\uffe1\021\uffe1\057" +
    "\uffe1\001\002\000\020\007\320\011\317\012\323\013\316" +
    "\024\324\031\321\032\322\001\002\000\020\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\024\uffe3\031\uffe3\032\uffe3\001\002" +
    "\000\054\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\021\ufff6\024\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\001\002\000\050\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\057\uffd1\001\002\000\054\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4" +
    "\021\ufff4\024\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\046" +
    "\ufff4\047\ufff4\051\ufff4\052\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\001\002\000\054\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\021\ufff3\024\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\046\ufff3\047\ufff3\051\ufff3\052" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002\000\054" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\021\ufff1\024\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\001\002\000\054\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\016\ufff5\021\ufff5\024\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\046\ufff5\047\ufff5\051\ufff5" +
    "\052\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002\000" +
    "\054\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\016\ufff2\021\ufff2\024\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\001\002\000\054\007\uffea\010\311\011" +
    "\uffea\012\075\013\uffea\015\042\016\uffea\021\uffea\024\uffea" +
    "\031\uffea\032\uffea\033\065\034\071\046\112\047\063\051" +
    "\103\052\100\054\074\055\106\056\130\057\uffea\001\002" +
    "\000\026\007\uffe2\011\uffe2\012\uffe2\013\uffe2\016\uffe2\021" +
    "\uffe2\024\uffe2\031\uffe2\032\uffe2\057\uffe2\001\002\000\012" +
    "\002\uff9d\060\uff9d\061\uff9d\065\uff9d\001\002\000\016\060" +
    "\331\061\035\062\030\063\334\064\027\065\026\001\002" +
    "\000\004\056\355\001\002\000\004\057\345\001\002\000" +
    "\004\056\344\001\002\000\004\056\336\001\002\000\004" +
    "\014\274\001\002\000\006\014\337\015\340\001\002\000" +
    "\066\007\uffea\010\047\012\075\013\uffea\015\042\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\065\034\071\035\057\046\112\047\063" +
    "\051\103\052\100\053\113\054\074\055\106\056\130\057" +
    "\uffea\001\002\000\004\051\341\001\002\000\004\016\342" +
    "\001\002\000\006\014\uff91\057\uff91\001\002\000\004\057" +
    "\uff8b\001\002\000\004\014\222\001\002\000\052\010\047" +
    "\012\075\015\042\022\uffea\023\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\033\065\034\071\035\057\046\112\047\063" +
    "\051\103\052\100\053\113\054\074\055\106\056\130\001" +
    "\002\000\012\004\172\005\173\006\171\057\347\001\002" +
    "\000\066\007\uffea\010\047\011\uffea\012\075\013\uffea\015" +
    "\042\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\065\034\071\035\057\046" +
    "\112\047\063\051\103\052\100\053\113\054\074\055\106" +
    "\056\130\001\002\000\004\011\351\001\002\000\004\017" +
    "\352\001\002\000\120\003\072\007\uffea\010\047\012\075" +
    "\013\uffea\015\042\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034\071" +
    "\035\057\036\066\041\110\042\121\043\053\044\070\045" +
    "\077\046\112\047\063\051\103\052\100\053\113\054\074" +
    "\055\106\056\122\057\uffea\060\050\061\035\062\030\063" +
    "\044\064\027\065\026\001\002\000\122\003\072\007\uffea" +
    "\010\047\012\075\013\uffea\015\042\020\354\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\065\034\071\035\057\036\066\041\110\042" +
    "\121\043\053\044\070\045\077\046\112\047\063\051\103" +
    "\052\100\053\113\054\074\055\106\056\122\057\uffea\060" +
    "\050\061\035\062\030\063\044\064\027\065\026\001\002" +
    "\000\122\003\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\001\002\000\006\014\357\015\356\001" +
    "\002\000\004\051\361\001\002\000\066\007\uffea\010\047" +
    "\012\075\013\uffea\015\042\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065" +
    "\034\071\035\057\046\112\047\063\051\103\052\100\053" +
    "\113\054\074\055\106\056\130\057\uffea\001\002\000\004" +
    "\057\uff8c\001\002\000\004\016\362\001\002\000\006\014" +
    "\uff92\057\uff92\001\002\000\010\014\357\015\356\057\uff8f" +
    "\001\002\000\012\004\172\005\173\006\171\011\365\001" +
    "\002\000\020\004\uffdb\005\uffdb\006\uffdb\011\uffdb\016\uffdb" +
    "\021\uffdb\057\uffdb\001\002\000\010\014\337\015\340\057" +
    "\uff8e\001\002\000\006\016\370\021\152\001\002\000\050" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\057\uffd3\001" +
    "\002\000\004\056\372\001\002\000\006\011\uff9e\021\uff9e" +
    "\001\002\000\006\011\uff9f\021\uff9f\001\002\000\120\003" +
    "\072\007\uffea\010\047\012\075\013\uffea\015\042\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\065\034\071\035\057\036\066\041\110" +
    "\042\121\043\053\044\070\045\077\046\112\047\063\051" +
    "\103\052\100\053\113\054\074\055\106\056\122\057\uffea" +
    "\060\050\061\035\062\030\063\044\064\027\065\026\001" +
    "\002\000\122\003\072\007\uffea\010\047\012\075\013\uffea" +
    "\015\042\020\376\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034\071" +
    "\035\057\036\066\041\110\042\121\043\053\044\070\045" +
    "\077\046\112\047\063\051\103\052\100\053\113\054\074" +
    "\055\106\056\122\057\uffea\060\050\061\035\062\030\063" +
    "\044\064\027\065\026\001\002\000\012\002\uff9c\060\uff9c" +
    "\061\uff9c\065\uff9c\001\002\000\004\010\u0100\001\002\000" +
    "\004\011\u0101\001\002\000\004\017\u0102\001\002\000\120" +
    "\003\072\007\uffea\010\047\012\075\013\uffea\015\042\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\065\034\071\035\057\036\066\041" +
    "\110\042\121\043\053\044\070\045\077\046\112\047\063" +
    "\051\103\052\100\053\113\054\074\055\106\056\122\057" +
    "\uffea\060\050\061\035\062\030\063\044\064\027\065\026" +
    "\001\002\000\122\003\072\007\uffea\010\047\012\075\013" +
    "\uffea\015\042\020\u0104\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\065\034" +
    "\071\035\057\036\066\041\110\042\121\043\053\044\070" +
    "\045\077\046\112\047\063\051\103\052\100\053\113\054" +
    "\074\055\106\056\122\057\uffea\060\050\061\035\062\030" +
    "\063\044\064\027\065\026\001\002\000\012\002\ufffb\060" +
    "\ufffb\061\ufffb\065\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\016\002\010\003\003\004\007\005\011\040" +
    "\012\041\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\021\040" +
    "\012\041\006\001\001\000\002\001\001\000\010\004\014" +
    "\040\015\041\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\016\040\012\041\006\001\001\000\002" +
    "\001\001\000\006\040\015\041\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\015\041\006\001\001" +
    "\000\002\001\001\000\006\037\032\042\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\370" +
    "\001\001\000\002\001\001\000\070\006\075\011\057\013" +
    "\042\014\115\015\072\016\051\017\060\020\054\022\100" +
    "\024\101\025\117\026\106\027\044\030\113\031\066\033" +
    "\040\034\116\035\110\036\053\042\104\043\061\045\103" +
    "\046\063\047\114\050\055\051\045\053\050\001\001\000" +
    "\002\001\001\000\034\006\147\011\057\013\042\014\115" +
    "\015\072\016\051\017\060\020\054\021\366\033\040\047" +
    "\130\051\045\053\050\001\001\000\004\010\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\057\013\313\014\115\015\363\016\051\017\060" +
    "\020\054\033\040\047\130\051\045\053\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\006\075\011\057\013\042\014\115\015" +
    "\072\016\051\017\060\020\054\022\100\024\101\025\117" +
    "\026\106\027\044\030\113\031\066\033\040\034\116\035" +
    "\162\042\104\043\061\045\103\046\063\047\114\050\055" +
    "\051\045\053\050\001\001\000\004\007\303\001\001\000" +
    "\002\001\001\000\024\011\057\014\115\016\277\017\166" +
    "\020\054\033\040\047\130\051\045\053\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\255\011\057\013\042" +
    "\014\115\015\072\016\051\017\060\020\054\033\040\047" +
    "\130\051\045\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\227\056\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\122" +
    "\001\001\000\002\001\001\000\016\032\140\033\143\051" +
    "\045\053\050\054\145\055\135\001\001\000\002\001\001" +
    "\000\032\006\126\011\057\013\042\014\115\015\072\016" +
    "\051\017\060\020\054\033\040\047\130\051\045\053\050" +
    "\001\001\000\002\001\001\000\004\044\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\147\011\057\013\042\014\115" +
    "\015\072\016\051\017\060\020\054\021\150\033\040\047" +
    "\130\051\045\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\153\011\057\013\042\014\115\015" +
    "\072\016\051\017\060\020\054\033\040\047\130\051\045" +
    "\053\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\033\143\051\045\053\050\054\145\055\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\006\075\011" +
    "\057\013\042\014\115\015\072\016\051\017\060\020\054" +
    "\022\100\024\101\025\117\026\106\027\044\030\113\031" +
    "\066\033\040\034\116\035\110\036\160\042\104\043\061" +
    "\045\103\046\063\047\114\050\055\051\045\053\050\001" +
    "\001\000\066\006\075\011\057\013\042\014\115\015\072" +
    "\016\051\017\060\020\054\022\100\024\101\025\117\026" +
    "\106\027\044\030\113\031\066\033\040\034\116\035\162" +
    "\042\104\043\061\045\103\046\063\047\114\050\055\051" +
    "\045\053\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\057\014\115\015\165\016" +
    "\051\017\166\020\054\033\040\047\130\051\045\053\050" +
    "\001\001\000\004\012\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\057\014\115\016\174\017\166\020" +
    "\054\033\040\047\130\051\045\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\201\011\057\013\042\014\115\015\072\016\051\017\060" +
    "\020\054\033\040\047\130\051\045\053\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\057\014\115\015\213\016\051\017" +
    "\166\020\054\033\040\047\130\051\045\053\050\001\001" +
    "\000\004\012\173\001\001\000\002\001\001\000\070\006" +
    "\075\011\057\013\042\014\115\015\072\016\051\017\060" +
    "\020\054\022\100\024\101\025\117\026\106\027\044\030" +
    "\113\031\066\033\040\034\116\035\110\036\216\042\104" +
    "\043\061\045\103\046\063\047\114\050\055\051\045\053" +
    "\050\001\001\000\066\006\075\011\057\013\042\014\115" +
    "\015\072\016\051\017\060\020\054\022\100\024\101\025" +
    "\117\026\106\027\044\030\113\031\066\033\040\034\116" +
    "\035\162\042\104\043\061\045\103\046\063\047\114\050" +
    "\055\051\045\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\222\011\057\013\042\014\115\015" +
    "\072\016\051\017\060\020\054\033\040\047\130\051\045" +
    "\053\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\057\014\115\015\233\016\051\017\166\020\054" +
    "\033\040\047\130\051\045\053\050\001\001\000\004\012" +
    "\173\001\001\000\002\001\001\000\070\006\075\011\057" +
    "\013\042\014\115\015\072\016\051\017\060\020\054\022" +
    "\100\024\101\025\117\026\106\027\044\030\113\031\066" +
    "\033\040\034\116\035\110\036\236\042\104\043\061\045" +
    "\103\046\063\047\114\050\055\051\045\053\050\001\001" +
    "\000\066\006\075\011\057\013\042\014\115\015\072\016" +
    "\051\017\060\020\054\022\100\024\101\025\117\026\106" +
    "\027\044\030\113\031\066\033\040\034\116\035\162\042" +
    "\104\043\061\045\103\046\063\047\114\050\055\051\045" +
    "\053\050\001\001\000\002\001\001\000\026\011\057\014" +
    "\115\015\241\016\051\017\166\020\054\033\040\047\130" +
    "\051\045\053\050\001\001\000\004\012\173\001\001\000" +
    "\002\001\001\000\070\006\075\011\057\013\042\014\115" +
    "\015\072\016\051\017\060\020\054\022\100\024\101\025" +
    "\117\026\106\027\044\030\113\031\066\033\040\034\116" +
    "\035\110\036\244\042\104\043\061\045\103\046\063\047" +
    "\114\050\055\051\045\053\050\001\001\000\066\006\075" +
    "\011\057\013\042\014\115\015\072\016\051\017\060\020" +
    "\054\022\100\024\101\025\117\026\106\027\044\030\113" +
    "\031\066\033\040\034\116\035\162\042\104\043\061\045" +
    "\103\046\063\047\114\050\055\051\045\053\050\001\001" +
    "\000\002\001\001\000\070\006\075\011\057\013\042\014" +
    "\115\015\072\016\051\017\060\020\054\022\100\024\101" +
    "\025\117\026\106\027\044\030\113\031\066\033\040\034" +
    "\116\035\110\036\247\042\104\043\061\045\103\046\063" +
    "\047\114\050\055\051\045\053\050\001\001\000\066\006" +
    "\075\011\057\013\042\014\115\015\072\016\051\017\060" +
    "\020\054\022\100\024\101\025\117\026\106\027\044\030" +
    "\113\031\066\033\040\034\116\035\162\042\104\043\061" +
    "\045\103\046\063\047\114\050\055\051\045\053\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\057\014\115\015\260\016\051" +
    "\017\166\020\054\033\040\047\130\051\045\053\050\001" +
    "\001\000\004\012\173\001\001\000\002\001\001\000\070" +
    "\006\075\011\057\013\042\014\115\015\072\016\051\017" +
    "\060\020\054\022\100\024\101\025\117\026\106\027\044" +
    "\030\113\031\066\033\040\034\116\035\110\036\263\042" +
    "\104\043\061\045\103\046\063\047\114\050\055\051\045" +
    "\053\050\001\001\000\066\006\075\011\057\013\042\014" +
    "\115\015\072\016\051\017\060\020\054\022\100\024\101" +
    "\025\117\026\106\027\044\030\113\031\066\033\040\034" +
    "\116\035\162\042\104\043\061\045\103\046\063\047\114" +
    "\050\055\051\045\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\270\011\057" +
    "\013\042\014\115\015\072\016\051\017\060\020\054\033" +
    "\040\047\130\051\045\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\147\011\057\013\042\014\115\015\072\016\051" +
    "\017\060\020\054\021\275\033\040\047\130\051\045\053" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\057\017\166\020\312\033\040\047\130" +
    "\051\045\053\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\057" +
    "\013\313\017\314\033\040\047\130\051\045\053\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\057\017" +
    "\325\033\040\047\130\051\045\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\332\043\334\045" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\342\011\057\013\042\014\115\015\072" +
    "\016\051\017\060\020\054\033\040\047\130\051\045\053" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\057\014\115\015\345\016\051\017\166\020\054\033\040" +
    "\047\130\051\045\053\050\001\001\000\004\012\173\001" +
    "\001\000\032\006\347\011\057\013\042\014\115\015\072" +
    "\016\051\017\060\020\054\033\040\047\130\051\045\053" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\006\075\011\057\013\042\014\115\015\072\016\051\017" +
    "\060\020\054\022\100\024\101\025\117\026\106\027\044" +
    "\030\113\031\066\033\040\034\116\035\110\036\352\042" +
    "\104\043\061\045\103\046\063\047\114\050\055\051\045" +
    "\053\050\001\001\000\066\006\075\011\057\013\042\014" +
    "\115\015\072\016\051\017\060\020\054\022\100\024\101" +
    "\025\117\026\106\027\044\030\113\031\066\033\040\034" +
    "\116\035\162\042\104\043\061\045\103\046\063\047\114" +
    "\050\055\051\045\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\357\011\057" +
    "\013\042\014\115\015\072\016\051\017\060\020\054\033" +
    "\040\047\130\051\045\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\006\075\011\057" +
    "\013\042\014\115\015\072\016\051\017\060\020\054\022" +
    "\100\024\101\025\117\026\106\027\044\030\113\031\066" +
    "\033\040\034\116\035\110\036\374\042\104\043\061\045" +
    "\103\046\063\047\114\050\055\051\045\053\050\001\001" +
    "\000\066\006\075\011\057\013\042\014\115\015\072\016" +
    "\051\017\060\020\054\022\100\024\101\025\117\026\106" +
    "\027\044\030\113\031\066\033\040\034\116\035\162\042" +
    "\104\043\061\045\103\046\063\047\114\050\055\051\045" +
    "\053\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\006\075\011\057" +
    "\013\042\014\115\015\072\016\051\017\060\020\054\022" +
    "\100\024\101\025\117\026\106\027\044\030\113\031\066" +
    "\033\040\034\116\035\110\036\u0102\042\104\043\061\045" +
    "\103\046\063\047\114\050\055\051\045\053\050\001\001" +
    "\000\066\006\075\011\057\013\042\014\115\015\072\016" +
    "\051\017\060\020\054\022\100\024\101\025\117\026\106" +
    "\027\044\030\113\031\066\033\040\034\116\035\162\042" +
    "\104\043\061\045\103\046\063\047\114\050\055\051\045" +
    "\053\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    //indica si se ha encontrado un error durante el analisis
    Boolean errores = false;

    //estructuras que almacenaran los simbolos de manera temporal durante
    //la creacion de las tablas de simbolos
    ListaElementosTabla listaParametros = new ListaElementosTabla();
    ListaElementosTabla listaVariables = new ListaElementosTabla();
    ArrayList<ASTNode> listaRetornos = new ArrayList<>();

    //estructura que almacena representaciones de las funciones que se hayan encontrado
    List<Funcion> functions = new ArrayList<Funcion>();

    //estructura que almacena las tablas de simbolos definidas
    SymbolTableStack symbolTables = new SymbolTableStack();
    
    /*
    *existeFuncion
    *E::nombre: nombre de la funcion a comprobar su existencia
    *S::Valor booleano que indica la existencia de una funcion
    *R::el nombre de la funcion debe ser un string
    *O::comprobar si una funcion ya fue definidas
    */
    private Boolean existeFuncion(String nombre){
        for(Funcion funcion : functions){
            if(funcion.getName() == nombre){
                return true;
            }
        }
        return false;
    }

    /*
    *getSymbolTableStack
    *E::ninguna
    *S::Tablas de simbolos que han sido creadas
    *R::ningua
    *O::Retornar las tablas de simbolos que han sido creadas
    */
    public SymbolTableStack getSymbolTableStack() {
        return symbolTables;
    }

    
    /*
    *getErrores
    *E::ningua
    *S::valor booleano que indica la existencia de algun error
    *R::ninguna
    *O::indicar si durante el parseo se encontro algun error
    */
    public Boolean getErrores(){
        return errores;
    }

//########################################################################

    /*
    *tiposCompatibles
    *E::tipo1: tipo de dato a comparar, tipo2: tipo de dato a comparar
    *S::valor booleano que indica si los tipos son compatibles
    *R::ninguna
    *O::comprobar si dos tipos de datos son compatibles
    */
    public boolean tiposCompatibles(String tipo1, String tipo2){
        if(tipo1.equals("float") && tipo2.equals("int")){
            return true;
        }
        else if (tipo1.equals("String") && tipo2.equals("char")){
            return true;
        }
        else if (tipo1.equals(tipo2)){
            return true;
        }
        else{
            return false;
        }
    }

    /*
    *checkDeclaraVar
    *E::tipo: tipo de dato a comparar, node: nodo que contiene el valor a comparar
    *S::valor booleano que indica si el valor es compatible con el tipo de la variable
    *R::ninguna
    *O::comprobar si el valor de una variable es compatible con su tipo
    */
    public boolean checkDeclaraVar(String tipo, ASTNode node){
        String valor = node.getChildren().get(0).getType();
        switch (valor) {
            case "literal_int":
                return tipo.equals("int") || tipo.equals("float");
            case "literal_bool":
                return tipo.equals("bool");
            case "literal_string":
                return tipo.equals("String");
            case "literal_float":
                return tipo.equals("float");
            case "literal_char":
                return tipo.equals("char");
            case "array":
                boolean arrayValido = true;
                for(ASTNode child : node.getChildren().get(0).getChildren()){
                    if(!checkDeclaraVar(tipo, child)){
                        System.out.println("Error: El arreglo contiene un valor incompatible con el tipo de dato");
                        arrayValido = false;
                    }else{
                        arrayValido = true;
                    }
                }
                return arrayValido;

            case "IDENTIFIER":
                String varName = node.getChildren().get(0).getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);    
                return tiposCompatibles(tipo, varTipo);
            case "llamaFuncion":
                String funName = node.getChildren().get(0).getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(node.getChildren().get(0).getChildren().size()>1)
                    funArg = node.getChildren().get(0).getChildren().get(1).getChildren();
                if(!funcionValida(funName, tipo, funArg).equals("invalida")){
                    return true;
                }else{
                    return false;
                }
            case "expresionBinaria":
                String valida = checkExpresion(node.getChildren().get(0));
                return tiposCompatibles(tipo, valida);
            case "operadorUnario":
                ASTNode opUnario = node.getChildren().get(0);
                String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
                switch(tipoOperando){
                    case "IDENTIFIER":
                        String idName = opUnario.getChildren().get(2).getValue().toString();
                        String idTipo = simboloValido(idName);
                        return tiposCompatibles(tipo, idTipo);
                    case "expresionNumerica":
                        return tipo.equals("int") || tipo.equals("float");
                    default:
                        return false;
                }
            default:
                return false;
        }
    }

    /*
    *checkExpresion
    *E::node: nodo que contiene la expresion a comparar
    *S::tipo de dato de la expresion
    *R::ninguna
    *O::comprobar el tipo de dato de una expresion comparando sus operandos
    */
    public String checkExpresion(ASTNode node){ //operandos izquierdos
        ArrayList<ASTNode> hijos = node.getChildren();
        ASTNode left = (ASTNode) hijos.get(2).getValue();
        ASTNode right = (ASTNode) hijos.get(3).getValue();
        String tipoOp = right.getType();
        switch(left.getType()){
            case "literal_int":
                if(tipoOp.equals("literal_int")){
                    return "int";
                }
                else if(tipoOp.equals("literal_float")){
                    return "float";
                }
                else if(checkExpresionAux(right, "int")){
                    return "int";
                }
                else if(checkExpresionAux(right, "float")){
                    return "float";
                }
                else{
                    return "invalida";
                }
            case "literal_string":
                if(tipoOp.equals("literal_string") || tipoOp.equals("literal_char")){
                    return "String";
                }
                else{
                    if(checkExpresionAux(right, "String")){
                        return "String";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_float":
                if(tipoOp.equals("literal_int") || tipoOp.equals("literal_float")){
                    return "float";
                }
                else{
                    if(checkExpresionAux(right, "int") || checkExpresionAux(right, "float")){
                        return "float";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_char":
                if(tipoOp.equals("literal_char")){
                    return "char";
                }
                else{
                    if(checkExpresionAux(right, "char")){
                        return "char";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "literal_bool":
                if(tipoOp.equals("literal_bool")){
                    return "bool";
                }
                else{
                    if(checkExpresionAux(right, "bool")){
                        return "bool";
                    }
                    else{
                        return "invalida";
                    }
                }
            case "IDENTIFIER":
                String varName = left.getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);
                if(checkExpresionAux(right, varTipo)){
                        return varTipo;
                }
                else{
                    return "invalida";
                }
            case "llamaFuncion":
                String funName = left.getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(left.getChildren().size()>1)
                    funArg = left.getChildren().get(1).getChildren();
                String tipoFuncion = funcionValida(funName, "getTipo", funArg);
                if(checkExpresionAux(right, tipoFuncion)){
                        return tipoFuncion;
                }else{
                    return "invalida";
                }

            case "expresionBinaria":
                if(left.getChildren().get(0).getValue().toString().equals("expresionAritmetica")){
                    String tipoExp = checkExpresion(left);
                    if(checkExpresionAux(right, tipoExp)){
                        return tipoExp;
                    }else{
                        return "invalida";
                    }
                }else{
                    return "bool";
                }
            //case "operadorUnario":
            //    ASTNode opUnario = node.getChildren().get(0);
            //    System.out.println(opUnario.toString());
            //    String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
            //    switch(tipoOperando){
            //        case "IDENTIFIER":
            //            String idName = opUnario.getChildren().get(2).getValue().toString();
            //            String idTipo = simboloValido(idName);
            //            if(tipoOp.equals("int")){
            //                return "int";
            //            }
            //            else if(tipoOp.equals("float")){
            //                return "float";
            //            }
            //            else{
            //                return "invalida";
            //            }
            //        case "expresionNumerica":
            //            if(tipoOp.equals("int")){
            //                return "int";
            //            }
            //            else if(tipoOp.equals("float")){
            //                return "float";
            //            }
            //            else{
            //                return "invalida";
            //            }
            //        default:
            //            return "invalida";
            //    }
            default:
                return "invalida";
        }
    }

    /*
    *checkExpresionAux
    *E: ASTNode right: nodo a la derecha del operador, String tipoCheck: tipo del nodo a la izquierda del operador
    *S: booleano que indica si la expresion es posible o no
    *R: right debe ser un nodo valido, tipoCheck debe ser un tipo valido
    *O: verifica si la expresion es posible o no segun los tipos de los nodos
    */
    public boolean checkExpresionAux(ASTNode right, String tipoCheck){
        String tipoOp = right.getType();
        switch(tipoOp){
            case "literal_int":
                return tipoCheck.equals("int") || tipoCheck.equals("float");
            case "literal_bool":
                return tipoCheck.equals("bool");
            case "literal_string":
                return tipoCheck.equals("String")|| tipoCheck.equals("char");
            case "literal_float":
                return tipoCheck.equals("float") ;
            case "literal_char":
                return tipoCheck.equals("char");
            case "IDENTIFIER":
                String varName = right.getChildren().get(0).getValue().toString();
                String varTipo = simboloValido(varName);
                return tiposCompatibles(tipoCheck, varTipo);
            case "llamaFuncion":
                String funName = right.getChildren().get(0).getValue().toString();
                ArrayList<ASTNode> funArg = new ArrayList<>();
                if(right.getChildren().size()>1)
                    funArg = right.getChildren().get(1).getChildren();
                if(!funcionValida(funName, tipoCheck, funArg).equals("invalida")){
                    return true;
                }else{
                    return false;
                }

            case "expresionBinaria":
                String tipoExp = checkExpresion(right);
                if(!tipoExp.equals("invalida")){
                    return true;
                }else{
                    return false;
                }
            //case "operadorUnario":
            //    ASTNode opUnario = right.getChildren().get(0);
            //    System.out.println(opUnario.toString());
            //    String tipoOperando = opUnario.getChildren().get(0).getValue().toString();
            //    switch(tipoOperando){
            //        case "IDENTIFIER":
            //            String idName = opUnario.getChildren().get(2).getValue().toString();
            //            String idTipo = simboloValido(idName);
            //            return tiposCompatibles(tipoCheck, idTipo);
            //        case "expresionNumerica":
            //            return tipoCheck.equals("int") || tipoCheck.equals("float");
            //        default:
            //            return false;
            //    }
            default:
                return false;
        }
    }

    /*
    *simboloValido
    *E: String varName: nombre de la variable a buscar
    *S: String con el tipo de la variable
    *R: varName debe ser un nombre valido, la variable debe estar declarada
    *O: busca la variable en la lista de variables y parametros y retorna su tipo
    */
    public String simboloValido(String varName){
        String varTipo = listaParametros.existe(varName);
        String varTipo1 = listaVariables.existe(varName);
        if(varTipo != null){
            return varTipo;
        }    
        else if(varTipo1 != null){
            return varTipo1;
        }else{
            System.out.println("Error: "+varName+" no coincide con ningun simbolo declarado previamente");
            return null;
        }
    }

    /*
    *funcionValida
    *E: String funName: nombre de la funcion a buscar, String tipo: tipo de retorno de la funcion, ArrayList<ASTNode> argumentos: lista de argumentos de la funcion
    *S: String con el tipo de retorno de la funcion
    *R: funName debe ser un nombre valido, la funcion debe estar declarada, sino retorna invalida
    *O: busca la funcion en la lista de funciones y verifica que los tipos de los argumentos sean compatibles con los tipos de los parametros
    */
    public String funcionValida(String funName, String tipo, ArrayList<ASTNode> argumentos){
        for (Funcion f : functions) {
            if(tipo.equals("getTipo")){
                tipo = f.getTipoRetorno();
            }
            if (f.getName().equals(funName) && tiposCompatibles(tipo, f.getTipoRetorno())){
                int i = 0;
                List<ElementoTabla> parametros = f.getParameters();
                if(parametros.size()==argumentos.size()){//la funcion y su llamada tienen la misma cantidad de parametros
                    boolean res = true;
                    for(ElementoTabla e : parametros){
                        Object valorArg = argumentos.get(i).getValue();
                        String tipoArg = argumentos.get(i).getType();
                        switch(tipoArg){
                            case "IDENTIFIER":
                                String varTipo = simboloValido(valorArg.toString());
                                res = tiposCompatibles(e.getType(), varTipo);
                                break;
                            case "literal_string":
                                res = e.getType().equals("String");
                                break;
                            case "literal_int":
                                res = e.getType().equals("int") || e.getType().equals("float");
                                break;
                            case "literal_float":
                                res = e.getType().equals("float");
                                break;
                            case "literal_char":
                                res = e.getType().equals("char") || e.getType().equals("String");
                                break;
                            case "llamaFuncion":
                                String funNameNest = ((ASTNode)valorArg).getChildren().get(0).getValue().toString();
                                ArrayList<ASTNode> funArg = new ArrayList<>();
                                if(((ASTNode)valorArg).getChildren().size()>1)
                                    funArg = ((ASTNode)valorArg).getChildren().get(1).getChildren();
                                res = !funcionValida(funNameNest, e.getType(), funArg).equals("invalida");
                                break;
                            default:
                                res = false;
                                break;
                        }
                        i++;
                    }
                    if(res)
                    return tipo;
                }
                System.out.println("Error: "+funName + " esperaba " + parametros.size() + " argumentos pero " + argumentos.size() + " fueron recibidos");
                return "invalida";

            }
        }
        return "invalida";
    }

    /*
    checkReturnsBloque
    E: ASTNode bloque: bloque de codigo a revisar
    S: booleano que indica si el bloque tiene o no un return
    R: bloque debe ser un bloque valido
    O: revisa si el bloque tiene un return, si lo tiene lo agrega a la lista de retornos
        utilizado para comprobar que la funcion tenga un return
    */
    public boolean checkReturnsBloque(ASTNode bloque){
        int cantReturn = 0;
        for(ASTNode sentencia : bloque.getChildren()){
            if(sentencia.getType().equals("returnStm")){
                listaRetornos.add(sentencia);
                cantReturn++;
            }
        }
        if(cantReturn <= 1){
            return true;
        }
        return false;
    }

    /*
    *checkDeclaraArray
    *E: ASTNode node: nodo a revisar
    *S: booleano que indica si todos los valores del array son del tipo del array
    *R: node debe ser un nodo valido
    *O: revisa si todos los valores del array son del tipo del array
    */
    public boolean checkDeclaraArray(ASTNode node){
        if(node.getType().equals("declaraArray")){
            String tipo = node.getChildren().get(0).getValue().toString();
            String nombre = node.getValue().toString();
            int tam = Integer.parseInt(node.getChildren().get(1).getValue().toString());
            String tipoArray = listaVariables.existe(nombre);
            if(tipoArray == null){
                ArrayList<ASTNode> valores = node.getChildren().get(2).getChildren();
                for(ASTNode valor : valores){
                    if(!checkDeclaraVar(tipo, valor)){
                        System.out.println("Error: el tipo de los valores del array "+nombre+" no coinciden con el tipo del array");
                        return false;
                    }
                }
                listaVariables.addParameter(new ElementoTabla(nombre, tipo, tam));
                return true;
            }else{
                System.out.println("Error: "+nombre+" ya fue declarado");
                return false;
            }
        }
        return false;
    }


    //instancia del analizador lexico creado en jflex
    Analizador s;
    parser(Analizador s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("### Parseo finalizado ###");
        ASTNode inicio = new ASTNode("inicio");
        inicio.addChild((ASTNode)e);
        RESULT = inicio;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //construccion del nodo para el arbol sintactico
        ASTNode programa = new ASTNode("programa");
        programa.addChild((ASTNode)e);
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= funciones main 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)f).setType("programa");
        ((ASTNode)f).addChild((ASTNode)m);
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= main funciones 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        ASTNode programa = new ASTNode("programa");
        programa.addChild((ASTNode)m);
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= funciones main funciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        ASTNode programa = new ASTNode("programa");
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        programa.addChild((ASTNode)m);
        bNode = (ASTNode)e;
        for(ASTNode child : bNode.getChildren()){
            programa.addChild(child);
        }
        RESULT = programa;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico 
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t )){
                System.out.println("Error: La funcion "+ (String) t +"  " + e + " ya fue declarada");
                errores = true;
                valida = false;
                existe = true;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Error: El simbolo " +  par.getName() + " ya fue declarado en esta función");
                    valida = false;
                    errores = true;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);  
        }
        
        ASTNode main = new ASTNode("declaraFuncion","main");
        if(!((ASTNode) d).navigateAST()){
            System.out.println("Error: main no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)d)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet);
            if(!validReturn){
                valida = false;
                System.out.println("Error: El tipo de retorno de main no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) d);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones declaraFuncion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("declaraFuncion");
        ASTNode bNode = (ASTNode)f;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)d);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= declaraFuncion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("declaraFuncion");
        res.addChild((ASTNode)d);
        RESULT = res;

        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= expresionLogica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("init");
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= expresionAritmetica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("init");
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operadorArit ::= MAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operadorArit ::= MENOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operadorArit ::= MULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorArit ::= DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorArit ::= MODULO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opRelacional ::= MENOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opRelacional ::= MENORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opRelacional ::= MAYOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opRelacional ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opRelacional ::= EQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opRelacional ::= NOTEQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorUnario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorUnario ::= MENOS IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionUnaria = new ASTNode("tipo","IDENTIFIER");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("res");
        res.addChild((ASTNode)expresionUnaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("value", e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorLogico ::= AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorLogico ::= REXC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionAritmetica ::= operandoArit 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT =(ASTNode)e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionAritmetica ::= expresionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionBinaria = new ASTNode("tipo","expresionAritmetica");
        ASTNode operador = new ASTNode("operador",op);
        ASTNode res = new ASTNode("expresionBinaria");
        res.addChild((ASTNode)expresionBinaria);
        res.addChild((ASTNode)operador);
        res.addChild(new ASTNode("left",(ASTNode)ex));
        res.addChild(new ASTNode("right",(ASTNode)e));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionRelacional ::= operandoRel opRelacional operandoRel 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //construccion del nodo para el arbol sintactico
    ASTNode expresionBinaria = new ASTNode("tipo","expresionRelacional");
    ASTNode res = new ASTNode("expresionBinaria");
    res.addChild((ASTNode)expresionBinaria);
    res.addChild(new ASTNode("operador",op));
    res.addChild(new ASTNode("left",(ASTNode)a));
    res.addChild(new ASTNode("right",(ASTNode)b));
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionLogica ::= terminoLogico 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode terminoLogico = new ASTNode("terminoLogico");
        terminoLogico.addChild((ASTNode)t);
        RESULT = (ASTNode)t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionLogica ::= expresionLogica operadorLogico terminoLogico 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionBinaria = new ASTNode("expresionBinaria");
        expresionBinaria.addChild(new ASTNode("tipo","expresionLogica"));
        expresionBinaria.addChild(new ASTNode("operador",op));
        expresionBinaria.addChild(new ASTNode("left",(ASTNode)ex));
        expresionBinaria.addChild(new ASTNode("right",(ASTNode)e));
        RESULT = expresionBinaria;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // terminoLogico ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_bool = new ASTNode("literal_bool");
        literal_bool.addChild(new ASTNode(b));
        RESULT = (literal_bool);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // terminoLogico ::= expresionRelacional 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionRelacional = new ASTNode("expresionBinaria");
        expresionRelacional.addChild((ASTNode)r);
        RESULT = (ASTNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // terminoLogico ::= NOT terminoLogico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode notOp = new ASTNode("notOp");
        notOp.addChild((ASTNode)t);
        ASTNode res =  new ASTNode("res");
        res.addChild(notOp);
        RESULT = (res);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // terminoLogico ::= LPAREN expresionLogica RPAREN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode expresionLogica = new ASTNode("expresionBinaria");
        expresionLogica.addChild((ASTNode)r);
        RESULT = (ASTNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operandoArit ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode IDENTIFIER = new ASTNode("IDENTIFIER");
        IDENTIFIER.addChild(new ASTNode("valor",e));
        RESULT = IDENTIFIER;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operandoArit ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_string = new ASTNode("literal_string");
        literal_string.addChild(new ASTNode(e));
        RESULT = literal_string;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operandoArit ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_int");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operandoArit ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_float = new ASTNode("literal_float");
        literal_float.addChild(new ASTNode(e));
        RESULT = literal_float;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operandoArit ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_char = new ASTNode("literal_char");
        literal_char.addChild(new ASTNode(e));
        RESULT = literal_char;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operandoArit ::= llamaFuncion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("llamaFuncion");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operandoArit ::= operadorUnario 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("operadorUnario");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operandoArit ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operandoArit ::= getValorArray 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operandoArit ::= LPAREN expresionAritmetica RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operandoRel ::= operandoArit 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operandoRel ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_bool = new ASTNode("literal_bool");
        literal_bool.addChild(new ASTNode(b));
        RESULT = (literal_bool);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literales ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_int",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literales ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_float",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literales ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_bool",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literales ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_string",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literales ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTNode("literal_char",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literales ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ASTNode("array",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("array");
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // array ::= array COMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("array");
        ASTNode bNode = (ASTNode)a;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if ::= IF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        boolean valida = true;
        res.addChild(new ASTNode("tipo","ifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        //checkReturnsBloque((ASTNode)b);
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(checkExpresion((ASTNode)exp).equals("invalida")){
                valida = false;
            }
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elif ::= ELIF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elif ::= elif ELIF LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elifStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        //res.addChild(new ASTNode("alternate","null"));
        ((ASTNode)e).addChild(new ASTNode("alternate",res));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else ::= ELSE LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","elseStm"));
        res.addChild(new ASTNode("body",(ASTNode)b));
        RESULT = res;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE LPAREN expresionLogica RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","whileStm"));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionLogica RPAREN DOLLAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","doWhileStm"));
        res.addChild(new ASTNode("body",(ASTNode)b));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }else{
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR LPAREN declaraVar DOLLAR expresionLogica DOLLAR expresion RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        //construccion del nodo para el arbol sintactico
        ASTNode res =  new ASTNode("estructuraControl");
        res.addChild(new ASTNode("tipo","forStm"));
        res.addChild(new ASTNode("init", (ASTNode)d));
        res.addChild(new ASTNode("eval", (ASTNode)exp));
        res.addChild(new ASTNode("update", (ASTNode)e));
        res.addChild(new ASTNode("body",(ASTNode)b));
        boolean valida = true;
        if(((ASTNode)exp).getType().equals("expresionBinaria")){
            if(!checkExpresion((ASTNode)exp).equals("invalida")){
                valida = true;
            }else{
                valida = false;
            }
        }else if(((ASTNode)exp).getType().equals("literal_bool")){
            valida = true;
        }else{
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        if(valida) RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructuraControl ::= if 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructuraControl ::= if elif 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructuraControl ::= if elif else 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) ef));
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructuraControl ::= if else 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)f).addChild(new ASTNode("alternate",(ASTNode) e));
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructuraControl ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructuraControl ::= doWhile 
            {
              Object RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = dw;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructuraControl ::= for 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return ::= RETURN expresion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)e).setType("value");
        RESULT = ((ASTNode)e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // break ::= BREAK 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argumento ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ASTNode("IDENTIFIER",e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumento ::= literales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // argumento ::= llamaFuncion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ((ASTNode)e).setType("funcion");
        RESULT = new ASTNode("llamaFuncion",((ASTNode)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumentos ::= argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("argumentos");
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("argumentos");
        ASTNode bNode = (ASTNode)a;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamaFuncion ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode llamadaFuncion = new ASTNode("nombre", e);
        res.addChild(llamadaFuncion);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamaFuncion ::= IDENTIFIER LPAREN argumentos RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode llamadaFuncion = new ASTNode("nombre", e);
        res.addChild(llamadaFuncion);
        res.addChild((ASTNode)a);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamaFuncion ::= lectura 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode lectura = new ASTNode("nombre","read");
        res.addChild(lectura);
        res.addChild((ASTNode)l);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFuncion ::= escritura 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode escritura = new ASTNode("nombre","print");
        res.addChild(escritura);
        res.addChild((ASTNode)e);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion ::= IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(!checkDeclaraVar(simboloValido((String)e), (ASTNode)ex)){
            System.out.println("Error: variable no declarada");
            System.exit(0);
        }else{
            ASTNode asignacion = new ASTNode("asignacion", e);
            asignacion.addChild((ASTNode)ex);
            RESULT = asignacion;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= asignacion DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode estructuraControl = new ASTNode("estructuraControl");
        estructuraControl.addChild((ASTNode)a);
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= expresion DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)e).setType("expresion");
        RESULT = (ASTNode)e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= declaraArray DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(((ASTNode)a).getValue().toString(),((ASTNode)a).getChildren().get(0).getValue().toString()));
        RESULT = (ASTNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= declaraVar DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode declaraVar = new ASTNode("declaraVar");
        declaraVar.addChild((ASTNode)a);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= declaraVarNoAsig DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode declaraVar = new ASTNode("declaraVar");
        declaraVar.addChild((ASTNode)a);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= return DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode returnStm = new ASTNode("returnStm");
        returnStm.addChild((ASTNode)a);
        RESULT = returnStm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= break DOLLAR 
            {
              Object RESULT =null;
		
        //construccion del nodo para el arbol sintactico
        ASTNode breakStm = new ASTNode("breakStm");
        RESULT = breakStm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= getValorArray DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= setValorArray DOLLAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= error DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("##### Se ha encontrado un error de syntaxis, el parseo continuara"); 
        errores = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("bloque");
        res.addChild((ASTNode)s);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("bloque");
        ASTNode bNode = (ASTNode)b;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild((ASTNode)s);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros ::= tipo IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico 
        listaParametros.addParameter(new ElementoTabla(i,(String) t));
        ASTNode res = new ASTNode("parametros");
        res.addChild(new ASTNode((String)t,(String)i));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= parametros COMA tipo IDENTIFIER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaParametros.addParameter(new ElementoTabla(i,(String) t));
        ASTNode res = new ASTNode("parametros");
        ASTNode bNode = (ASTNode)p;
        for(ASTNode child : bNode.getChildren()){
            res.addChild(child);
        }
        res.addChild(new ASTNode((String)t,(String)i));
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaraFuncion ::= tipoFuncion IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t)) {
                System.out.println("Error: La funcion "+ (String) t +"  " + e + " ya fue declarada");
                errores = true;
                existe = true;
                valida = false;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Error: Simbolo " +  par.getName() + " ya ha sido declarado en esta funcion");
                    errores = true;
                    valida = false;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);
        }
        
        ASTNode main = new ASTNode("declaraFuncion",e);
        if(!((ASTNode) b).navigateAST()){
            System.out.println("Error: "+e+" no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet);
            if(!validReturn){
                valida =false;
                System.out.println("Error: El tipo de retorno de "+e+" no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) p);
        main.addChild((ASTNode) b);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaraFuncion ::= tipoFuncion IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        boolean valida = true;
        Boolean existe = false;
        for (Funcion f : functions) {
            if (f.getName().equals(e) && f.getTipoRetorno().equals((String) t)) {
                System.out.println("La funcion \""+ (String) t +"  " + e + "\" ya fue declarada previamente");
                errores = true;
                existe = true;
                valida = false;
            }
        }
        if(existe == false){
            Funcion newFuncion = new Funcion(e, listaParametros.getParams(), (String) t);
            functions.add(newFuncion);

            SymbolTable symbolTable = new SymbolTable(e,(String) t);

            for (ElementoTabla param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (ElementoTabla par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Simbolo " +  par.getName() + " ya ha sido declarado en esta funcion");
                    errores = true;
                    valida = false;
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                }
            }
             getSymbolTableStack().push(symbolTable);
        }
        
        ASTNode main = new ASTNode("declaraFuncion",e);
        if(!((ASTNode) b).navigateAST()){
            System.out.println("Error: "+e+" no tiene sentencia de retorno");
            valida = false;
        }
        if(!checkReturnsBloque((ASTNode)b)){
            valida = false;
        }
        for (ASTNode ret : listaRetornos) {
            ASTNode nodoRet = ret.getChildren().get(0);
            boolean validReturn = checkDeclaraVar((String)t, nodoRet); 
            if(!validReturn){
                valida =false;
                System.out.println("Error: El tipo de retorno de "+e+" no coincide con el valor retornado ");
                break;
            }
        }
        listaVariables  = new ListaElementosTabla();
        listaParametros  = new ListaElementosTabla();
        main.addChild((ASTNode) b);
        main.addChild(new ASTNode("dataType",t));
        listaRetornos = new ArrayList();
        if(valida) RESULT = main;  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= ARRAY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaraArray ::= INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        //listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraArray", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild(new ASTNode("size",s));
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaraArray ::= CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        //listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraArray", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild(new ASTNode("size",s));
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArrayAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaraVarNoAsig ::= INT IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaraVarNoAsig ::= CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaraVarNoAsig ::= tipo IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        listaVariables.addParameter(new ElementoTabla(i,(String) t));
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVarNoAsig",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaraVar ::= INT IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar(t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaraVar ::= CHAR IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar(t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaraVar ::= declaraArray ASIG LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ((ASTNode)d).addChild( (ASTNode)e);
        if(checkDeclaraArray((ASTNode)d)){
            RESULT = (ASTNode)d;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaraVar ::= tipo IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        if(checkDeclaraVar((String)t,(ASTNode)e)){
            listaVariables.addParameter(new ElementoTabla(i,(String) t));
        }else{
            System.out.println("Error al declarar variable "+i+": El tipo de la variable ("+t+") no coincide con el tipo del valor asignado o este no ha sido declarado");
        }
        ASTNode declaraVar = new ASTNode("declaraVar", i);
        declaraVar.addChild( new ASTNode("dataType", t) );
        declaraVar.addChild( (ASTNode)e);
        RESULT = declaraVar;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // getValorArray ::= IDENTIFIER declaraArrayAux 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode res = new ASTNode("res");
        ASTNode getValorArray = new ASTNode("getValorArray",e);
        getValorArray.addChild(new ASTNode("posicion",d));
        res.addChild(getValorArray);
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getValorArray",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // setValorArray ::= getValorArray ASIG expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode setValorArray = ((ASTNode)e).getChildren().get(0);
        setValorArray.setType("setValorArray");
        setValorArray.addChild(new ASTNode("value", (ASTNode)ex));
        RESULT = setValorArray;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setValorArray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lectura ::= LEER LPAREN numerico RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = n;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lectura ::= LEER LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        String tipoId = simboloValido(n);
        if(tipoId.equals("int") || tipoId.equals("float")){
            ASTNode argumentos = new ASTNode("argumentos");
            ASTNode identifier = new ASTNode("IDENTIFIER",n);
            //identifier.addChild(new ASTNode(n));
            argumentos.addChild(identifier);
            RESULT = argumentos;
        }else{
            System.out.println("Error: print +"+n+" debe ser de tipo int o float pero es tipo "+ tipoId);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // numerico ::= LITERAL_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_int");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // numerico ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode literal_int = new ASTNode("literal_float");
        literal_int.addChild(new ASTNode(e));
        RESULT = literal_int;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // escritura ::= ESCRIBIR LPAREN expresion RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //construccion del nodo para el arbol sintactico
        ASTNode nodoValor = ((ASTNode)e).getChildren().get(0);
        String tipoNodo = nodoValor.getType();
        String valor;
        if(tipoNodo.equals("IDENTIFIER")){
            valor = nodoValor.getChildren().get(0).getValue().toString();
        }else{
            valor = nodoValor.getChildren().get(0).getType();
        }
        ASTNode argumento = new ASTNode("argumentos");
        argumento.addChild(new ASTNode(tipoNodo,valor));
        if(tipoNodo.equals("literal_int") || tipoNodo.equals("literal_float") || tipoNodo.equals("literal_string")){
            RESULT = argumento;
        }else if(tipoNodo.equals("IDENTIFIER")){
            String tipoId = simboloValido(nodoValor.getChildren().get(0).getValue().toString());    
            if(tipoId.equals("int") || tipoId.equals("float") || tipoId.equals("String")){
                RESULT = argumento;
            }
        }else{
            System.out.println("Error: print solo es compatible con int, float, y string");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
